{"title":"Java 学习笔记","uid":"896e0a094c544537dc77e7a14bb4ade8","slug":"Java学习笔记","date":"2021-12-12T09:48:21.000Z","updated":"2021-12-12T09:49:10.866Z","comments":true,"path":"api/articles/Java学习笔记.json","keywords":null,"cover":"https://pics.cuonc.com/2021/12/04/b0850bc2327bc605712eb3b1e66eae55.jpg","content":"<h3 id=\"JRE-和-JDK\"><a href=\"#JRE-和-JDK\" class=\"headerlink\" title=\"JRE 和 JDK\"></a>JRE 和 JDK</h3><ul>\n<li>JRE：Java 程序的运行时环境，包含 JVM 和运行时所需要的核心类库 。</li>\n<li>JDK：Java 程序开发工具包，包含 JRE 和开发人员使用的工具。</li>\n</ul>\n<h3 id=\"编译和运行\"><a href=\"#编译和运行\" class=\"headerlink\" title=\"编译和运行\"></a>编译和运行</h3><ul>\n<li>编译：指将编写的 Java 源文件翻译成 JVM 能认识的 class 字节码文件，javac 编译器会检查程序中是否有错，有错误就会提示，无错误则编译成功。</li>\n<li>运行：指将 class 文件 交给 JVM 运行。</li>\n</ul>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>关键字</th>\n<th>内存占用</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字节型</td>\n<td>byte</td>\n<td>1个字节</td>\n<td>-128~127</td>\n</tr>\n<tr>\n<td>短整型</td>\n<td>short</td>\n<td>2个字节</td>\n<td>-32768~32767</td>\n</tr>\n<tr>\n<td>整型</td>\n<td>int（默认）</td>\n<td>4个字节</td>\n<td>-2的31次方~2的31次方-1</td>\n</tr>\n<tr>\n<td>长整型</td>\n<td>long</td>\n<td>8个字节</td>\n<td>-2的63次方~2的63次方-1</td>\n</tr>\n<tr>\n<td>单精度浮点数</td>\n<td>float</td>\n<td>4个字节</td>\n<td>-3.4028E+38~3.4028E+38</td>\n</tr>\n<tr>\n<td>双精度浮点数</td>\n<td>double（默认）</td>\n<td>8个字节</td>\n<td>-1.7977E+308~1.7977E+308</td>\n</tr>\n<tr>\n<td>字符型</td>\n<td>char</td>\n<td>2个字节</td>\n<td>0~65535</td>\n</tr>\n<tr>\n<td>布尔型</td>\n<td>boolean</td>\n<td>1个字节</td>\n<td>true，false</td>\n</tr>\n</tbody></table>\n<h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><p>除了八种基本数据类型，其他全都是引用数据类型，如 String。</p>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><ol>\n<li>自动转换：从小到大，byte-short-char–&gt;int–&gt;long–&gt;float–&gt;double</li>\n<li>强制转换：从大到小，浮点到整数可能会发生精度损失，int 转 short 可能会发生数据溢出（丢失）<br>格式：<code>数据类型 变量名 = (数据类型) 被转数据值;</code></li>\n</ol>\n<h3 id=\"ASCII-编码表\"><a href=\"#ASCII-编码表\" class=\"headerlink\" title=\"ASCII 编码表\"></a>ASCII 编码表</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>数值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>48</td>\n</tr>\n<tr>\n<td>A</td>\n<td>65</td>\n</tr>\n<tr>\n<td>a</td>\n<td>97</td>\n</tr>\n</tbody></table>\n<p>在 char 类型和 int 类型计算的过程中，char 类型的字符先查询编码表，得到 97，再和 1 求和，结果为 98。char 类型提升为了 int 类型。char 类型内存 2 个字节，int 类型内存 4 个字节。</p>\n<h3 id=\"重载和重写\"><a href=\"#重载和重写\" class=\"headerlink\" title=\"重载和重写\"></a>重载和重写</h3><ul>\n<li>重载：方法名相同，参数不同，返回类型可以相同也可以不同，方法体不同。一般用在构造器方法上，JVM 会根据传入参数的不同，选择不同的构造方法。</li>\n<li>重写：方法名，参数，返回类型相同，方法体不同。一般用在子类对父类方法的重写，定义子类自己的行为。</li>\n</ul>\n<h3 id=\"Java-内存区域\"><a href=\"#Java-内存区域\" class=\"headerlink\" title=\"Java 内存区域\"></a>Java 内存区域</h3><p>JDK1.8 之后：图片丢失</p>\n<h3 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h3><ul>\n<li>类：一类事物的属性和行为的集合，抽象的。</li>\n<li>对象：一类事物的具体体现，类的一个实例，具体的。</li>\n</ul>\n<p>类是对象的模板，对象是类的实体。</p>\n<h3 id=\"成员变量的默认值\"><a href=\"#成员变量的默认值\" class=\"headerlink\" title=\"成员变量的默认值\"></a>成员变量的默认值</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>基本类型</td>\n<td>整数</td>\n<td>0</td>\n</tr>\n<tr>\n<td></td>\n<td>浮点</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td></td>\n<td>字符</td>\n<td>‘\\u0000’</td>\n</tr>\n<tr>\n<td></td>\n<td>布尔类型</td>\n<td>false</td>\n</tr>\n<tr>\n<td>引用类型</td>\n<td>数组、类、接口</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<h3 id=\"面向对象三大基本特征\"><a href=\"#面向对象三大基本特征\" class=\"headerlink\" title=\"面向对象三大基本特征\"></a>面向对象三大基本特征</h3><ul>\n<li>封装：将类的属性和方法隐藏起来，提供一个安全的接口供外界调用，减少耦合。缺点是重复代码，要写很多 getter 和 setter。</li>\n<li>继承：子类继承父类的属性和方法，减少代码重复，提高可维护性，程序更加有层次，缺点是增加了耦合。</li>\n<li>多态：同一个接口或者类，使用不同的实例完成不同的操作。减少耦合，提高可维护性。三个必要条件：继承，重写，父类引用指向子类对象。缺点是无法调用子类特有的方法。</li>\n</ul>\n<h3 id=\"Scanner-和-Random\"><a href=\"#Scanner-和-Random\" class=\"headerlink\" title=\"Scanner 和 Random\"></a>Scanner 和 Random</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Scanner</span>\n<span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第一个数据：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Random</span>\n<span class=\"token class-name\">Random</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"Java-集合\"><a href=\"#Java-集合\" class=\"headerlink\" title=\"Java 集合\"></a>Java 集合</h3><ul>\n<li>List：顺序结构，有序可以重复<ul>\n<li>ArrayList：底层是 Object 数组，可以根据 index 快速访问</li>\n<li>LinkedList：底层是双向链表，无法快速访问</li>\n</ul>\n</li>\n<li>Set：不允许重复<ul>\n<li>HashSet：无序唯一，底层基于 HashMap，存储Key</li>\n<li>LinkedHashSet：底层基于 LinkedHashMap</li>\n</ul>\n</li>\n<li>Map：键值对 key&amp;value 形式，key 无法重复，value 可以<ul>\n<li>HashMap：底层是数组+链表，链表用于存储哈希冲突产生的多个 value，JDK1.8 之后链表换成了红黑树，查询效率更高</li>\n<li>LinkedHashMap：在 HashMap 基础上增加了一条双向链表，来保证存取顺序一定</li>\n</ul>\n</li>\n</ul>\n<p>HashSet 检查重复：先计算对象的 hashcode 值，与集合中的其他对象的 hashcode 值比较，如果没有相同的则存储。如果有相同的，则使用 equals() 方法判断是否相同。而 hashcode 并不完美，两个不同的对象，有概率 hashcode 值也相同，所以在需要使用 HashSet 存储对象时，一定要重写 hashcode 和 equals。</p>\n<h3 id=\"与-equals\"><a href=\"#与-equals\" class=\"headerlink\" title=\"== 与 equals\"></a>== 与 equals</h3><ul>\n<li>没有重写 equals() 方法，则两者相同：对基本类型比较值，对引用类型比较内存地址。</li>\n<li>有重写 equals() 方法，则 equals() 比较的是对象的内容是否相等。</li>\n</ul>\n<h3 id=\"String-类\"><a href=\"#String-类\" class=\"headerlink\" title=\"String 类\"></a>String 类</h3><p>常用方法：equals，length，charAt，indexOf，toCharArray，replace，split</p>\n<p>字符串类，一旦被创建赋值之后，无法改变，只能将变量指向其他字符串的内存地址。</p>\n<h3 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h3><p>可以修饰成员变量和成员方法，被修饰之后的变量和方法属于类，建议直接用类名调用。</p>\n<p>静态代码块：在类加载之后只执行一次。</p>\n<h3 id=\"Arrays-类\"><a href=\"#Arrays-类\" class=\"headerlink\" title=\"Arrays 类\"></a>Arrays 类</h3><p>常用方法：toString，sort，asList</p>\n<h3 id=\"Math-类\"><a href=\"#Math-类\" class=\"headerlink\" title=\"Math 类\"></a>Math 类</h3><p>常用方法：abs（返回 double 的绝对值），ceil（返回大于等于参数的最小整数），floor（返回小于等于参数最大的整数），round（返回最接近参数的 long，相当于四舍五入）</p>\n<h3 id=\"final-关键字\"><a href=\"#final-关键字\" class=\"headerlink\" title=\"final 关键字\"></a>final 关键字</h3><p>可以修饰类、方法和变量</p>\n<ul>\n<li>类：不能被继承</li>\n<li>方法：不能被重写</li>\n<li>变量：基础数据类型不能被重新赋值，引用类型不能再指向另一个对象</li>\n</ul>\n<h3 id=\"权限修饰符\"><a href=\"#权限修饰符\" class=\"headerlink\" title=\"权限修饰符\"></a>权限修饰符</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>public</th>\n<th>protected</th>\n<th>default（空）</th>\n<th>private</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同类中</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>同一包中</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td>不同包的子类</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>不同包中的无关类</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>public 任意访问，private 只有同类能访问，default 只能在同包中访问，protected 在不同包子类中也能访问。</p>\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><p>本质是一个带具体实现父类或父接口的匿名的子类对象。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> 父类名或者接口名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>     \n    <span class=\"token comment\">// 方法重写     </span>\n    <span class=\"token annotation punctuation\">@Override</span>      \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>         \n        <span class=\"token comment\">// 执行语句     </span>\n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"Object-类\"><a href=\"#Object-类\" class=\"headerlink\" title=\"Object 类\"></a>Object 类</h3><p>Java 中所有类的父类</p>\n<p>常用方法：toString，equals</p>\n<p>Objects 是一个工具类，其中的 equals 方法直接传递两个参数，可以防止空指针异常。</p>\n<h3 id=\"Date-类\"><a href=\"#Date-类\" class=\"headerlink\" title=\"Date 类\"></a>Date 类</h3><p>无参构造自动设置系统当前时间的毫秒时刻（距 1970年1月1日00:00:00 GMT），有参构造传递一个 long 值可以自定义时刻。</p>\n<p>常用方法：getTime（把日期对象转换成时间毫秒值）</p>\n<h3 id=\"DateFormat-类\"><a href=\"#DateFormat-类\" class=\"headerlink\" title=\"DateFormat 类\"></a>DateFormat 类</h3><p>抽象类，可使用子类 SimpleDateFormat，构造方法传递一个日期格式。</p>\n<table>\n<thead>\n<tr>\n<th>标识字母（区分大小写）</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>y</td>\n<td>年</td>\n</tr>\n<tr>\n<td>M</td>\n<td>月</td>\n</tr>\n<tr>\n<td>d</td>\n<td>日</td>\n</tr>\n<tr>\n<td>H</td>\n<td>时</td>\n</tr>\n<tr>\n<td>m</td>\n<td>分</td>\n</tr>\n<tr>\n<td>s</td>\n<td>秒</td>\n</tr>\n</tbody></table>\n<p>常用方法：format（将 Date 对象格式化为字符串），parse（将字符串解析为 Date 对象）</p>\n<h3 id=\"System-类\"><a href=\"#System-类\" class=\"headerlink\" title=\"System 类\"></a>System 类</h3><p>常用方法：currentTimeMillis（获取当前时间到 1970年1月1日00:00:00 GMT 的毫秒值），arraycopy（将数组中指定的数据拷贝到另一个数组中）</p>\n<h3 id=\"StringBuilder-类\"><a href=\"#StringBuilder-类\" class=\"headerlink\" title=\"StringBuilder 类\"></a>StringBuilder 类</h3><p>为了解决 String 类无法修改造成的效率问题。</p>\n<p>无参构造创建一个空的 StringBuilder 容器，有参构造创建一个StringBuilder 容器，传递一个字符串进去。</p>\n<p>常用方法：append（在循环中效率比 + 更高），toString（将 StringBuilder 对象转换成 String 对象）</p>\n<h3 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h3><p>基本类型效率高，但是功能少，Java 提供了基本类型对应的包装类，实现更多功能。</p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>对应的包装类（位于java.lang包中）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td><strong>Integer</strong></td>\n</tr>\n<tr>\n<td>long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>Double</td>\n</tr>\n<tr>\n<td>char</td>\n<td><strong>Character</strong></td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>Boolean</td>\n</tr>\n</tbody></table>\n<ul>\n<li>装箱：从基本类型转换成对应的包装类对象</li>\n<li>拆箱：从包装类对象转换成对应的基本类型</li>\n</ul>\n<p>JDK1.5 开始，装箱和拆箱可以自动完成。</p>\n<h3 id=\"基本类型和字符串之间的转换\"><a href=\"#基本类型和字符串之间的转换\" class=\"headerlink\" title=\"基本类型和字符串之间的转换\"></a>基本类型和字符串之间的转换</h3><p>基本类型转换成字符串直接拼接：+””</p>\n<p>字符串转换成对应的基本类型使用对应包装类的 praseXxx 方法</p>\n<h3 id=\"Collection-集合\"><a href=\"#Collection-集合\" class=\"headerlink\" title=\"Collection 集合\"></a>Collection 集合</h3><p>所有单列集合（List 和 Set）的根接口</p>\n<p>常用方法：add，remove，contains，isEmpty，size</p>\n<h3 id=\"Iterator-接口\"><a href=\"#Iterator-接口\" class=\"headerlink\" title=\"Iterator 接口\"></a>Iterator 接口</h3><p>构造方法获取一个集合对应的迭代器</p>\n<p>常用方法：next（返回下一个元素），hasNext（返回是否还有元素）</p>\n<p>增强 for 的原理是迭代器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>元素的数据类型  变量 <span class=\"token operator\">:</span> <span class=\"token class-name\">Collection</span>集合or数组<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n  \t<span class=\"token comment\">//写操作代码</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>集合里可以存储不同类型的对象，但是没必要，一般都是同类型的。如果传递了不同的类型，取出时会发生强转异常。</p>\n<p>可以在类或方法中预支地使用未知的类型，将运行时异常转移到了编译时期。</p>\n<h3 id=\"常见的数据类型\"><a href=\"#常见的数据类型\" class=\"headerlink\" title=\"常见的数据类型\"></a>常见的数据类型</h3><p>栈，队列，数组，链表，二叉树</p>\n<h3 id=\"Collections-工具类\"><a href=\"#Collections-工具类\" class=\"headerlink\" title=\"Collections 工具类\"></a>Collections 工具类</h3><p>常用方法：addAll，shuffle（打乱顺序），sort（排序，按指定规则排序）</p>\n<h3 id=\"comparable-和-comparator-的区别\"><a href=\"#comparable-和-comparator-的区别\" class=\"headerlink\" title=\"comparable 和 comparator 的区别\"></a>comparable 和 comparator 的区别</h3><ul>\n<li>comparable 接口下有一个 compareTo(Object obj) 方法用来排序。用于在类中定义排序方法。</li>\n<li>comparator 接口下有一个 compare(Object obj1, Object obj2) 方法用来排序。用于在匿名内部类中重写排序方法。</li>\n</ul>\n<h3 id=\"Throwable-类\"><a href=\"#Throwable-类\" class=\"headerlink\" title=\"Throwable 类\"></a>Throwable 类</h3><ul>\n<li>Error：严重错误，无法通过修改代码处理的错误</li>\n<li>Exception：表示异常，可以通过修改代码纠正使程序继续运行</li>\n</ul>\n<p>常用方法：printStackTrace，getMessage</p>\n<h3 id=\"Exception-分类\"><a href=\"#Exception-分类\" class=\"headerlink\" title=\"Exception 分类\"></a>Exception 分类</h3><p>编译期异常（如日期格式化异常）和运行时异常（数学异常）</p>\n<p>异常处理：</p>\n<ul>\n<li><p>throw 直接抛出给调用者</p>\n</li>\n<li><p>throws 声明异常给调用者不处理</p>\n</li>\n<li><p>try…catch 捕获异常</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>      \n    编写可能会出现异常的代码 \n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型  e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>      \n    处理异常的代码      \n        <span class=\"token comment\">//记录日志/打印异常信息/继续抛出异常 </span>\n<span class=\"token punctuation\">&#125;</span>ﬁnally<span class=\"token punctuation\">&#123;</span>\n    最终一定执行的代码\n        <span class=\"token comment\">//当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。</span>\n        <span class=\"token comment\">//以下情况，ﬁnally 不会被执行：</span>\n        <span class=\"token comment\">//1.在 finally 语句块第一行发生了异常。 因为在其他行，finally 块还是会得到执行</span>\n\t\t<span class=\"token comment\">//2.在前面的代码中用了 System.exit(int)已退出程序。 exit 是带参函数 ；若该语句在异常语句之后，finally 会执行</span>\n\t\t<span class=\"token comment\">//3.程序所在的线程死亡。</span>\n\t\t<span class=\"token comment\">//4.关闭 CPU。</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>可以捕获多个异常，子异常在父异常上方</p>\n</li>\n</ul>\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><ul>\n<li>并发：多个事件在同一个时间段发生</li>\n<li>并行：多个事件在同一时刻发生</li>\n</ul>\n<h3 id=\"线程和进程\"><a href=\"#线程和进程\" class=\"headerlink\" title=\"线程和进程\"></a>线程和进程</h3><ul>\n<li>进程：是指程序的一次执行过程，是系统运行的基本单位。</li>\n<li>线程：是进程中的一个执行单元，一个进程可以产生多个线程。</li>\n</ul>\n<h3 id=\"线程的几种状态\"><a href=\"#线程的几种状态\" class=\"headerlink\" title=\"线程的几种状态\"></a>线程的几种状态</h3><p>new，runnable，blocked，waiting，timewaiting，terminated</p>\n<h3 id=\"创建线程的方法\"><a href=\"#创建线程的方法\" class=\"headerlink\" title=\"创建线程的方法\"></a>创建线程的方法</h3><ol>\n<li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li>\n<li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li>\n<li>调用线程对象的start()方法来启动线程。</li>\n</ol>\n<h3 id=\"Thread-和-Runnable-的区别\"><a href=\"#Thread-和-Runnable-的区别\" class=\"headerlink\" title=\"Thread 和 Runnable 的区别\"></a>Thread 和 Runnable 的区别</h3><p>实现 Runnable 接口比继承 Thread 类更好：</p>\n<ol>\n<li>适合多个相同的程序代码的线程去共享同一个资源。</li>\n<li>可以避免java中的单继承的局限性。</li>\n<li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</li>\n<li>线程池只能放入实现Runable或Callable类线程，不能直接放入继承Thread的类。</li>\n</ol>\n<h3 id=\"为什么我们调用-start-方法时会执行-run-方法，为什么我们不能直接调用-run-方法？\"><a href=\"#为什么我们调用-start-方法时会执行-run-方法，为什么我们不能直接调用-run-方法？\" class=\"headerlink\" title=\"为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？\"></a>为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？</h3><p>调用 start 方法方可启动线程并使线程进入就绪状态，而 run 方法只是 thread 的一个普通方法调用，还是在主线程里执行。</p>\n<h3 id=\"synchronized-关键字\"><a href=\"#synchronized-关键字\" class=\"headerlink\" title=\"synchronized 关键字\"></a>synchronized 关键字</h3><p>保证被它修饰过的方法或者代码块在同一时刻只有一个线程执行</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>同步锁<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>      \n    需要同步操作的代码 \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//锁对象可以是任意类型，多个线程对象要使用同一把锁</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>     \n    可能会产生线程安全问题的代码   \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//当有执行该方法的线程时，其他线程无法使用此方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"说说-sleep-方法和-wait-方法区别和共同点\"><a href=\"#说说-sleep-方法和-wait-方法区别和共同点\" class=\"headerlink\" title=\"说说 sleep() 方法和 wait() 方法区别和共同点?\"></a>说说 sleep() 方法和 wait() 方法区别和共同点?</h3><ul>\n<li>sleep 方法不会释放锁，wait 方法会释放锁</li>\n<li>除非使用 wait(long timeout) 方法传递一个时间，否则 wait() 无法自动苏醒，需要其他线程调用 notify</li>\n<li>wait 用于线程间通信，sleep 用于暂停执行</li>\n<li>都可以暂停线程的执行</li>\n</ul>\n<h3 id=\"使用线程池的步骤\"><a href=\"#使用线程池的步骤\" class=\"headerlink\" title=\"使用线程池的步骤\"></a>使用线程池的步骤</h3><ol>\n<li>创建线程池</li>\n<li>创建 Runnable 接口子类对象</li>\n<li>提交 Runnable 接口子类对象</li>\n<li>关闭线程池</li>\n</ol>\n<h3 id=\"File-类\"><a href=\"#File-类\" class=\"headerlink\" title=\"File 类\"></a>File 类</h3><ul>\n<li>绝对路径：从盘符开始的路径</li>\n<li>相对路径：相对于项目目录的路径</li>\n</ul>\n<p>常用方法：exist，isDirectory，isFile，createNewFile（当且仅当该名称的文件不存在时，创建一个新的空文件），delete，mkdir（创建此File表示的目录），mkdir（创建此File表示的目录以及任何必需但不存在的父目录），list（返回一个String数组，表示该File目录中所有的子文件或目录），listFiles（返回一个File数组，表示该File目录中所有的子文件或目录）</p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p>指在当前方法内调用自己的这种现象</p>\n<ul>\n<li>直接递归自身调用自身</li>\n<li>间接递归可以A方法调用B方法，B方法调用C方法，C方法调用A方法</li>\n</ul>\n<p>递归一定要有限定条件，保证递归能够停下，并且递归次数不能过多，否则会发生栈内存溢出。构造方法禁止递归。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DiGuiDemo</span> <span class=\"token punctuation\">&#123;</span>    \n    <span class=\"token comment\">//计算n的阶乘，使用递归完成        </span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>         \n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>        \n        <span class=\"token comment\">// 调用求阶乘的方法            </span>\n        <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n        <span class=\"token comment\">// 输出结果</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"阶乘为:\"</span><span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token comment\">/*           \n    通过递归算法实现.         \n    参数列表:int          \n    返回值类型: int        \n    */</span>        \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        \n        <span class=\"token comment\">// 1的阶乘为1            </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>             \n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>         \n        <span class=\"token punctuation\">&#125;</span>        \n        <span class=\"token comment\">/*             \n        n不为1时,方法返回 n! = n*(n‐1)!              \n        递归调用getValue方法        \n        */</span>            \n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>n ‐ <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DiGuiDemo3</span> <span class=\"token punctuation\">&#123;</span>     \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>         \n        <span class=\"token comment\">// 创建File对象         </span>\n        <span class=\"token class-name\">File</span> dir  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n        <span class=\"token comment\">// 调用打印目录方法            </span>\n        <span class=\"token function\">printDir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n    <span class=\"token punctuation\">&#125;</span>       \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printDir</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> dir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        \n        <span class=\"token comment\">// 获取子文件和目录            </span>\n        <span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> files <span class=\"token operator\">=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 \n        <span class=\"token comment\">// 循环打印            </span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file <span class=\"token operator\">:</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>             \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                \n                <span class=\"token comment\">// 是文件，判断文件名并输出文件绝对路径</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                     \n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名:\"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 \n                <span class=\"token punctuation\">&#125;</span>             \n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>                 \n                <span class=\"token comment\">// 是目录，继续遍历,形成递归                 </span>\n                <span class=\"token function\">printDir</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             \n            <span class=\"token punctuation\">&#125;</span>         \n        <span class=\"token punctuation\">&#125;</span>     \n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"文件过滤器\"><a href=\"#文件过滤器\" class=\"headerlink\" title=\"文件过滤器\"></a>文件过滤器</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DiGuiDemo4</span> <span class=\"token punctuation\">&#123;</span>     \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>         \n        <span class=\"token class-name\">File</span> dir <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         \n        <span class=\"token function\">printDir2</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n    <span class=\"token punctuation\">&#125;</span>        \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printDir2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> dir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        \n        <span class=\"token comment\">// 匿名内部类方式,创建过滤器子类对象  </span>\n        <span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> files <span class=\"token operator\">=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>             \n        <span class=\"token annotation punctuation\">@Override</span>             \n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> pathname<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                 \n                <span class=\"token keyword\">return</span> pathname<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".java\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             \n                                                 \n            <span class=\"token punctuation\">&#125;</span>         \n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n        <span class=\"token comment\">// 循环打印            </span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file <span class=\"token operator\">:</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>             \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                 \n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名:\"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             \n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>                 \n                <span class=\"token function\">printDir2</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             \n            <span class=\"token punctuation\">&#125;</span>         \n        <span class=\"token punctuation\">&#125;</span>     \n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h3><h4 id=\"字节输出流-OutputStream\"><a href=\"#字节输出流-OutputStream\" class=\"headerlink\" title=\"字节输出流 OutputStream\"></a>字节输出流 OutputStream</h4><p>常用方法：close（完成操作之后必须执行），flush，write</p>\n<h5 id=\"文件输出流-FileOutputStream\"><a href=\"#文件输出流-FileOutputStream\" class=\"headerlink\" title=\"文件输出流 FileOutputStream\"></a>文件输出流 FileOutputStream</h5><p>构造方法传递 File 对象或者 String 路径创建文件输出流，加一个 true 可追加数据</p>\n<p>Windows 换行符号：<code>\\r\\n</code></p>\n<p>Unix 换行符号：<code>\\n</code></p>\n<h4 id=\"字节输入流-InputStream\"><a href=\"#字节输入流-InputStream\" class=\"headerlink\" title=\"字节输入流 InputStream\"></a>字节输入流 InputStream</h4><p>常用方法：close（完成操作之后必须执行），read（读取字节时会自动提升为int类型）</p>\n<h5 id=\"文件输入流-FileInputStream\"><a href=\"#文件输入流-FileInputStream\" class=\"headerlink\" title=\"文件输入流 FileInputStream\"></a>文件输入流 FileInputStream</h5><p>构造方法传递 File 对象或者 String 路径创建文件输入流</p>\n<h3 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h3><p>中文字符占用多个字节存储，所以使用字符流处理文本文件更方便。使用系统默认的字符编码和默认字节缓冲区。字符流无法处理图片视频等非文本文件。</p>\n<p>FileWriter 与 FileOutputStream 不同， 如果不关闭，数据只是保存到缓冲区，并未保存到文件。</p>\n<p>在 close 执行之后，流对象无法继续使用写出别的内容，所以必须在 close 之前执行 flush 方法。</p>\n<p>在实际开发中，IO 异常一定要处理。</p>\n<h3 id=\"缓冲流\"><a href=\"#缓冲流\" class=\"headerlink\" title=\"缓冲流\"></a>缓冲流</h3><p>对四个基本流的增强，在创建流对象时，创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统 IO 次数，提高读写效率。</p>\n<h4 id=\"字节缓冲流：BufferedInputStream，BufferedOutputStream\"><a href=\"#字节缓冲流：BufferedInputStream，BufferedOutputStream\" class=\"headerlink\" title=\"字节缓冲流：BufferedInputStream，BufferedOutputStream\"></a>字节缓冲流：BufferedInputStream，BufferedOutputStream</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建字节缓冲输入流 </span>\n<span class=\"token class-name\">BufferedInputStream</span> bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bis.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 创建字节缓冲输出流 </span>\n<span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bos.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>读取时 read 传递一个 byte 数组，效率更高。</p>\n<h4 id=\"字符缓冲流：BufferedReader，BufferedWriter\"><a href=\"#字符缓冲流：BufferedReader，BufferedWriter\" class=\"headerlink\" title=\"字符缓冲流：BufferedReader，BufferedWriter\"></a>字符缓冲流：BufferedReader，BufferedWriter</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建字符缓冲输入流 </span>\n<span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"br.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 创建字符缓冲输出流 </span>\n<span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bw.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>特有方法：readLine（读取一行文字），newLine（写一行分隔符）</p>\n<h3 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h3><p>是字节与字符间的桥梁</p>\n<p>InputStreamReader 类：Reader 的子类，读取字节解码为字符。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">InputStreamReader</span> isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">InputStreamReader</span> isr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in.txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>OutputStreamWriter 类：Writer 的子类，读取字符编码为字节。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">OutputStreamWriter</span> isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">OutputStreamWriter</span> isr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out.txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><p>对象序列化，用一个字节序列表示一个对象，字节序列中存储对象的数据，类型和属性等信息，可以写出到文件，持久化存储。反之，还可以从文件中读取字节序列，重构对象，称为反序列化。</p>\n<p>ObjectOutputStream 类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">FileOutputStream</span> fileOut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">ObjectOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fileOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>一个对象想要序列化，必须实现 Serializable 接口，对象内部的所有属性必须可序列化，如果有某个属性不需要序列化，可使用 transient 关键字修饰。</p>\n<p>常用方法： writeObject（将指定的对象写出）</p>\n<p>ObjectInputStream 类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">FileInputStream</span> fileIn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">ObjectInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fileIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>常用方法：readObject</p>\n<ul>\n<li>如果能找到类对应的 class 文件，则反序列化成功，如果没有，则会抛出 ClassNotFoundException  异常。</li>\n<li>如果找到的 class 文件在序列化对象之后发生了修改，则反序列化失败，抛出  InvalidClassException 异常。</li>\n</ul>\n<p>Serializable 提供了序列版本号的功能，验证序列化对象和类的版本是否一致。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//指定1L，即使修改过类，反序列化也不会抛异常报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"TCP-IP-协议\"><a href=\"#TCP-IP-协议\" class=\"headerlink\" title=\"TCP/IP 协议\"></a>TCP/IP 协议</h3><p>应用层，传输层，网络层，数据链路层，物理层</p>\n<p>TCP 面向连接，三次握手：</p>\n<ul>\n<li>客户端向服务器发出请求，等待服务器确认</li>\n<li>服务器向客户端发回一个相应，通知客户端已经收到了请求</li>\n<li>客户端再次向服务器端发送确认信息，确认连接</li>\n</ul>\n<p>UDP 面向无连接，直接传输不需要建立连接</p>\n<p>网络编程三要素：协议，IP 地址，端口号</p>\n<h3 id=\"Socket-类\"><a href=\"#Socket-类\" class=\"headerlink\" title=\"Socket 类\"></a>Socket 类</h3><p>Socket：该类实现客户端套接字，套接字指的是两台设备之间通讯的端点。</p>\n<p>构造方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Socket</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>常用方法：getInputStream（返回此套接字的输入流），getOutputStream，close，shutdownOutput（禁用此套接字的输出流）</p>\n<p>ServerSocket 类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ServerSocket</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">6666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>常用方法：accept（侦听并接受连接，返回一个新的 Socket 对象，用于和客户端实现通信）</p>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><p>注解是给计算机看的，注释是给程序员看的。也叫元数据，一种代码级别的说明。</p>\n<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><p>将类的各个组成部分封装为其他对象。</p>\n<p>可以在程序运行过程中操作这些对象，可以解耦，提高程序可扩展性。</p>\n<p>获取 class 对象的方式：</p>\n<ul>\n<li>Class.forName(“全类名”)，用于配置文件</li>\n<li>类名.class，用于参数传递</li>\n<li>对象.getClass()，用于对象获取字节码</li>\n</ul>\n<p>同一个字节码文件在一次程序运行过程中只会被加载一次。</p>\n<p>class 对象功能：获取成员变量 Field，获取构造方法 Constructor，获取成员方法 Method，获取全类名</p>\n<h3 id=\"如何解决无法使用最新的-springboot–2-2-6-RELEASE-下载-dependencies\"><a href=\"#如何解决无法使用最新的-springboot–2-2-6-RELEASE-下载-dependencies\" class=\"headerlink\" title=\"如何解决无法使用最新的 springboot–2.2.6.RELEASE 下载 dependencies\"></a>如何解决无法使用最新的 springboot–2.2.6.RELEASE 下载 dependencies</h3><p>到 maven 的 settings.xml 里注释掉 阿里云的 镜像， 让 maven 从官方库下载，就没问题了</p>\n<h3 id=\"RestController-写在类上，导致类中的方法全部返回了-json-数据，无法通过视图解析器跳转到页面\"><a href=\"#RestController-写在类上，导致类中的方法全部返回了-json-数据，无法通过视图解析器跳转到页面\" class=\"headerlink\" title=\"@RestController 写在类上，导致类中的方法全部返回了 json 数据，无法通过视图解析器跳转到页面\"></a>@RestController 写在类上，导致类中的方法全部返回了 json 数据，无法通过视图解析器跳转到页面</h3><p>@RestController 是包括 @Controller 和 @ResponseBody 的组合注解</p>\n<h3 id=\"Repository-和-Mapper-注解的区别\"><a href=\"#Repository-和-Mapper-注解的区别\" class=\"headerlink\" title=\"@Repository 和 @Mapper 注解的区别\"></a>@Repository 和 @Mapper 注解的区别</h3><p>@Mapper 注解是 Mybatis 的注解，是用来说明这个是一个 Mapper，对应的 xxxMapper.xml 就是来实现这个 Mapper。然后在 service 层使用 @Autowired 注解注入。<br>@Repository 注解是 Spring 的注解，使用该注解把当前类注册成一个 bean，再使用 @Autowired注入。<br>接口上的 @Mapper 也是可以去掉的，但是要在启动类上加上 @MapperScan(value = {“cn.yltang.mapper”})。这句话的意思是在指定位置扫描 Mapper 类。</p>\n<h3 id=\"前置通知\"><a href=\"#前置通知\" class=\"headerlink\" title=\"前置通知\"></a>前置通知</h3><p>切入点方法之前执行</p>\n<h3 id=\"MVC-设计模式\"><a href=\"#MVC-设计模式\" class=\"headerlink\" title=\"MVC 设计模式\"></a>MVC 设计模式</h3><p>model模型层，封装数据，实体类；view视图层，jsp，html，展示数据；controller控制层，处理程序逻辑</p>\n<h3 id=\"SpringMVC-中返回-String-时-return-的写法\"><a href=\"#SpringMVC-中返回-String-时-return-的写法\" class=\"headerlink\" title=\"SpringMVC 中返回 String 时 return 的写法\"></a>SpringMVC 中返回 String 时 return 的写法</h3><ul>\n<li>return “main”，返回视图。</li>\n<li>需要携带request用forward，不需要则redirect。</li>\n<li>相对路径不带/，绝对路径带/。</li>\n</ul>\n<h3 id=\"与-的区别\"><a href=\"#与-的区别\" class=\"headerlink\" title=\"#{} 与 ${} 的区别\"></a>#{} 与 ${} 的区别</h3><p><code>#&#123;&#125;</code>表示一个占位符号，通过<code>#&#123;&#125;</code>可以实现 preparedStatement 向占位符中设置值，自动进行 java 类型和 jdbc 类型转换， <code>#&#123;&#125;</code>可以有效防止 sql 注入。 <code>#&#123;&#125;</code>可以接收简单类型值或 pojo 属性值。 如果 parameterType 传输单个简单类型值，<code>#&#123;&#125;</code>括号中可以是 value 或其它名称。</p>\n<p><code>$&#123;&#125;</code> 表示拼接 sql 串，通过<code>$&#123;&#125;</code>可以将 parameterType 传入的内容拼接在 sql 中且不进行 jdbc 类型转换， <code>$&#123;&#125;</code>可以接收简单类型值或 pojo 属性值，如果 parameterType 传输单个简单类型值，<code>$&#123;&#125;</code>括号中只能是 value。</p>\n<h3 id=\"MyBatis-设计模式\"><a href=\"#MyBatis-设计模式\" class=\"headerlink\" title=\"MyBatis 设计模式\"></a>MyBatis 设计模式</h3><p>工厂模式 SqlSessionFactory，代理模式 MapperProxyFactory，构建者模式 SqlSessionFactoryBuilder</p>\n<h3 id=\"MyBatis-自动提交事务的设置\"><a href=\"#MyBatis-自动提交事务的设置\" class=\"headerlink\" title=\"MyBatis 自动提交事务的设置\"></a>MyBatis 自动提交事务的设置</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSaveUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>   \n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    user<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis user09\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  \t<span class=\"token comment\">//6.执行操作   </span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>   \n<span class=\"token annotation punctuation\">@Before</span><span class=\"token comment\">//在测试方法执行之前执行  </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span> \n\t<span class=\"token comment\">//1.读取配置文件   </span>\n    in <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SqlMapConfig.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token comment\">//2.创建构建者对象   </span>\n    <span class=\"token class-name\">SqlSessionFactoryBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token comment\">//3.创建 SqlSession 工厂对象   </span>\n    factory <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//4.创建 SqlSession 对象   </span>\n    session <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//传递一个 true 打开自动提交事务</span>\n  \t<span class=\"token comment\">//5.创建 Dao 的代理对象   </span>\n    userDao <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IUserDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>   \n<span class=\"token annotation punctuation\">@After</span><span class=\"token comment\">//在测试方法执行完成之后执行  </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>   \n    <span class=\"token comment\">//7.提交事务 </span>\n    session<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//自动提交事务则此行不需要</span>\n  \t<span class=\"token comment\">//8.释放资源</span>\n    session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"Mybatis-延迟加载\"><a href=\"#Mybatis-延迟加载\" class=\"headerlink\" title=\"Mybatis 延迟加载\"></a>Mybatis 延迟加载</h3><p>就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载</p>\n<p>好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。</p>\n<p>坏处：因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗 时间，所以可能造成用户等待时间变长，造成用户体验下降。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazyLoadingEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aggressiveLazyLoading<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"Mybatis-缓存\"><a href=\"#Mybatis-缓存\" class=\"headerlink\" title=\"Mybatis 缓存\"></a>Mybatis 缓存</h3><ul>\n<li>一级缓存：是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。</li>\n<li>二级缓存：是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。 需要开启。</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span> \n\t<span class=\"token comment\">&lt;!-- 开启二级缓存的支持 --></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cacheEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"Mybatis-接口绑定\"><a href=\"#Mybatis-接口绑定\" class=\"headerlink\" title=\"Mybatis 接口绑定\"></a>Mybatis 接口绑定</h3><p>与映射文件名相同，基于动态代理来生成对象执行sql</p>\n<h3 id=\"Mybatis-和-hebernate\"><a href=\"#Mybatis-和-hebernate\" class=\"headerlink\" title=\"Mybatis 和 hebernate\"></a>Mybatis 和 hebernate</h3><p>h是通过实体映射模型全自动，m是写sql半自动</p>\n<h3 id=\"Mybatis-核心对象\"><a href=\"#Mybatis-核心对象\" class=\"headerlink\" title=\"Mybatis 核心对象\"></a>Mybatis 核心对象</h3><p>SqlSessionFactory</p>\n<h3 id=\"MySQL5-7-之后修改默认密码\"><a href=\"#MySQL5-7-之后修改默认密码\" class=\"headerlink\" title=\"MySQL5.7 之后修改默认密码\"></a>MySQL5.7 之后修改默认密码</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'root'</span><span class=\"token variable\">@'localhost'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'root密码'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"增删改\"><a href=\"#增删改\" class=\"headerlink\" title=\"增删改\"></a>增删改</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> 表名<span class=\"token punctuation\">(</span>列名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>列名<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>列名n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span>值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>值n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> 表名 <span class=\"token punctuation\">[</span><span class=\"token keyword\">where</span> 条件<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">update</span> 表名 <span class=\"token keyword\">set</span> 列名<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 列名<span class=\"token number\">2</span> <span class=\"token operator\">=</span> 值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">where</span> 条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n\t字段列表\n<span class=\"token keyword\">from</span>\n\t表名列表\n<span class=\"token keyword\">where</span>\n\t条件列表\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span>\n\t分组字段\n<span class=\"token keyword\">having</span>\n\t分组之后的条件\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span>\n\t排序\n<span class=\"token keyword\">limit</span>\n\t分页限定<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>多个字段查询</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> 字段名<span class=\"token number\">1</span>，字段名<span class=\"token number\">2.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">from</span> 表名；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>去除重复</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> 字段名<span class=\"token number\">1</span>，字段名<span class=\"token number\">2.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">from</span> 表名；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>where 条件</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">*</span> <span class=\"token operator\">></span> 、<span class=\"token operator\">&lt;</span> 、<span class=\"token operator\">&lt;=</span> 、<span class=\"token operator\">>=</span> 、<span class=\"token operator\">=</span> 、<span class=\"token operator\">&lt;></span>\n<span class=\"token operator\">*</span> <span class=\"token operator\">BETWEEN</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">AND</span>  \n<span class=\"token operator\">*</span> <span class=\"token operator\">IN</span><span class=\"token punctuation\">(</span> 集合<span class=\"token punctuation\">)</span> \n<span class=\"token operator\">*</span> <span class=\"token operator\">LIKE</span>：模糊查询\n\t<span class=\"token operator\">*</span> 占位符：\n\t\t<span class=\"token operator\">*</span> _:单个任意字符\n\t\t<span class=\"token operator\">*</span> <span class=\"token operator\">%</span>：多个任意字符\n<span class=\"token operator\">*</span> <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span>  \n<span class=\"token operator\">*</span> <span class=\"token operator\">and</span>  或 <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token operator\">*</span> <span class=\"token operator\">or</span>  或 <span class=\"token operator\">||</span> \n<span class=\"token operator\">*</span> <span class=\"token operator\">not</span>  或 <span class=\"token operator\">!</span>\n\t\t\n<span class=\"token comment\">-- 查询年龄大于等于20 小于等于30</span>\n\t\t\t\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">20</span> <span class=\"token operator\">&amp;&amp;</span>  age <span class=\"token operator\">&lt;=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">20</span> <span class=\"token operator\">AND</span>  age <span class=\"token operator\">&lt;=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">20</span> <span class=\"token operator\">AND</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\t\t\t\n<span class=\"token comment\">-- 查询年龄22岁，18岁，25岁的信息</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span> <span class=\"token operator\">OR</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span> <span class=\"token operator\">OR</span> age <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n<span class=\"token comment\">-- 查询英语成绩为null\t\t\t</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> english <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\t\n<span class=\"token comment\">-- 查询英语成绩不为null</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> english  <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\t\n<span class=\"token comment\">-- 查询姓马的有哪些？ like</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">LIKE</span> <span class=\"token string\">'马%'</span><span class=\"token punctuation\">;</span>\n\t\t\t\n<span class=\"token comment\">-- 查询姓名第二个字是化的人</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">LIKE</span> <span class=\"token string\">\"_化%\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\n<span class=\"token comment\">-- 查询姓名是3个字的人</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">LIKE</span> <span class=\"token string\">'___'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 查询姓名中包含德的人</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%德%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"排序分组\"><a href=\"#排序分组\" class=\"headerlink\" title=\"排序分组\"></a>排序分组</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 排序 ASC：升序，默认的。DESC：降序。 </span>\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> 排序字段<span class=\"token number\">1</span> 排序方式<span class=\"token number\">1</span> ，  排序字段<span class=\"token number\">2</span> 排序方式<span class=\"token number\">2.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">-- 聚合函数</span>\n<span class=\"token number\">1.</span> count：计算个数\n\t<span class=\"token number\">1.</span> 一般选择非空的列：主键\n\t<span class=\"token number\">2.</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.</span> max：计算最大值\n<span class=\"token number\">3.</span> min：计算最小值\n<span class=\"token number\">4.</span> sum：计算和\n<span class=\"token number\">5.</span> avg：计算平均值\n<span class=\"token operator\">*</span> 注意：聚合函数的计算，排除<span class=\"token boolean\">null</span>值。\n\t\t解决方案：\n\t\t\t<span class=\"token number\">1.</span> 选择不包含非空的列进行计算\n\t\t\t<span class=\"token number\">2.</span> IFNULL函数\n\n<span class=\"token comment\">-- 分组查询</span>\n\t<span class=\"token number\">1.</span> 语法：<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 分组字段；\n\t<span class=\"token number\">2.</span> 注意：\n\t\t<span class=\"token number\">1.</span> 分组之后查询的字段：分组字段、聚合函数\n\t\t<span class=\"token number\">2.</span> <span class=\"token keyword\">where</span> 和 <span class=\"token keyword\">having</span> 的区别？\n\t\t\t<span class=\"token number\">1.</span> <span class=\"token keyword\">where</span> 在分组之前进行限定，如果不满足条件，则不参与分组。<span class=\"token keyword\">having</span>在分组之后进行限定，如果不满足结果，则不会被查询出来\n\t\t\t<span class=\"token number\">2.</span> <span class=\"token keyword\">where</span> 后不可以跟聚合函数，<span class=\"token keyword\">having</span>可以进行聚合函数的判断。\n\n\t\t<span class=\"token comment\">-- 按照性别分组。分别查询男、女同学的平均分</span>\n\n\t\t<span class=\"token keyword\">SELECT</span> sex <span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sex<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">-- 按照性别分组。分别查询男、女同学的平均分,人数</span>\n\t\t\n\t\t<span class=\"token keyword\">SELECT</span> sex <span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sex<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组</span>\n\t\t<span class=\"token keyword\">SELECT</span> sex <span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> math <span class=\"token operator\">></span> <span class=\"token number\">70</span> <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sex<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人</span>\n\t\t<span class=\"token keyword\">SELECT</span> sex <span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> math <span class=\"token operator\">></span> <span class=\"token number\">70</span> <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sex <span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">SELECT</span> sex <span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> 人数 <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> math <span class=\"token operator\">></span> <span class=\"token number\">70</span> <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sex <span class=\"token keyword\">HAVING</span> 人数 <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 分页查询</span>\n\t<span class=\"token number\">1.</span> 语法：<span class=\"token keyword\">limit</span> 开始的索引<span class=\"token punctuation\">,</span>每页查询的条数<span class=\"token punctuation\">;</span>\n\t<span class=\"token number\">2.</span> 公式：开始的索引 <span class=\"token operator\">=</span> （当前的页码 <span class=\"token operator\">-</span> <span class=\"token number\">1</span>） <span class=\"token operator\">*</span> 每页显示的条数\n\t\t<span class=\"token comment\">-- 每页显示3条记录 </span>\n\n\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 第1页</span>\n\t\t\n\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 第2页</span>\n\t\t\n\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 第3页</span>\n\n\t<span class=\"token number\">3.</span> <span class=\"token keyword\">limit</span> 是一个MySQL<span class=\"token string\">\"方言\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">*</span> 概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。\t\n<span class=\"token operator\">*</span> 分类：\n\t<span class=\"token number\">1.</span> 主键约束：<span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> 自增 <span class=\"token keyword\">auto_increment</span>\n\t<span class=\"token number\">2.</span> 非空约束：<span class=\"token operator\">not</span> <span class=\"token boolean\">null</span>\n\t<span class=\"token number\">3.</span> 唯一约束：<span class=\"token keyword\">unique</span>\n\t<span class=\"token number\">4.</span> 外键约束：<span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span>\n\n<span class=\"token comment\">-- 外键约束</span>\n<span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>让表于表产生关系，从而保证数据的正确性。\n\t<span class=\"token number\">1.</span> 在创建表时，可以添加外键\n\t\t<span class=\"token operator\">*</span> 语法：\n\t\t\t<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名<span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t\t\t外键列\n\t\t\t\t<span class=\"token keyword\">constraint</span> 外键名称 <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>外键列名称<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> 主表名称<span class=\"token punctuation\">(</span>主表列名称<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token number\">2.</span> 删除外键\n\t\t<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> 外键名称<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token number\">3.</span> 创建表之后，添加外键\n\t\t<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">CONSTRAINT</span> 外键名称 <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>外键字段名称<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> 主表名称<span class=\"token punctuation\">(</span>主表列名称<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token number\">4.</span> 级联操作\n\t\t<span class=\"token number\">1.</span> 添加级联操作\n\t\t\t语法：<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">CONSTRAINT</span> 外键名称 \n\t\t\t\t\t<span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>外键字段名称<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> 主表名称<span class=\"token punctuation\">(</span>主表列名称<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">CASCADE</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">CASCADE</span>  <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token number\">2.</span> 分类：\n\t\t\t<span class=\"token number\">1.</span> 级联更新：<span class=\"token keyword\">ON</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">CASCADE</span> \n\t\t\t<span class=\"token number\">2.</span> 级联删除：<span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">CASCADE</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 内连接查询：</span>\n\t\t\t<span class=\"token number\">1.</span> 从哪些表中查询数据\n\t\t\t<span class=\"token number\">2.</span> 条件是什么\n\t\t\t<span class=\"token number\">3.</span> 查询哪些字段\n<span class=\"token comment\">-- 隐式内连接：使用where条件消除无用数据</span>\n\t\t\t<span class=\"token operator\">*</span> 例子：\n\t\t\t<span class=\"token comment\">-- 查询所有员工信息和对应的部门信息</span>\n\n\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">,</span>dept <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">-- 查询员工表的名称，性别。部门表的名称</span>\n\t\t\t<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>emp<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span>dept<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">,</span>dept <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">SELECT</span> \n\t\t\t\tt1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 员工表的姓名</span>\n\t\t\t\tt1<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span><span class=\"token comment\">-- 员工表的性别</span>\n\t\t\t\tt2<span class=\"token punctuation\">.</span>name <span class=\"token comment\">-- 部门表的名称</span>\n\t\t\t<span class=\"token keyword\">FROM</span>\n\t\t\t\temp t1<span class=\"token punctuation\">,</span>\n\t\t\t\tdept t2\n\t\t\t<span class=\"token keyword\">WHERE</span> \n\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 显式内连接：</span>\n\t\t\t<span class=\"token operator\">*</span> 语法： <span class=\"token keyword\">select</span> 字段列表 <span class=\"token keyword\">from</span> 表名<span class=\"token number\">1</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">inner</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">join</span> 表名<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件\n\t\t\t<span class=\"token operator\">*</span> 例如：\n\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> dept <span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\t\n\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">JOIN</span> dept <span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\t\n\n<span class=\"token comment\">-- 外链接查询：</span>\n\t\t<span class=\"token number\">1.</span> 左外连接：\n\t\t\t<span class=\"token operator\">*</span> 语法：<span class=\"token keyword\">select</span> 字段列表 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">left</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">outer</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件；\n\t\t\t<span class=\"token operator\">*</span> 查询的是左表所有数据以及其交集部分。\n\t\t\t<span class=\"token operator\">*</span> 例子：\n\t\t\t\t<span class=\"token comment\">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span>\n\t\t\t\t<span class=\"token keyword\">SELECT</span> \tt1<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span> <span class=\"token keyword\">FROM</span> emp t1 <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> dept t2 <span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token number\">2.</span> 右外连接：\n\t\t\t<span class=\"token operator\">*</span> 语法：<span class=\"token keyword\">select</span> 字段列表 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">right</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">outer</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件；\n\t\t\t<span class=\"token operator\">*</span> 查询的是右表所有数据以及其交集部分。\n\t\t\t<span class=\"token operator\">*</span> 例子：\n\t\t\t\t<span class=\"token keyword\">SELECT</span> \t<span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> dept t2 <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> emp t1 <span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 子查询：</span>\n\t\t<span class=\"token operator\">*</span> 概念：查询中嵌套查询，称嵌套查询为子查询。\n\t\t\t<span class=\"token comment\">-- 查询工资最高的员工信息</span>\n\t\t\t<span class=\"token comment\">-- 1 查询最高的工资是多少 9000</span>\n\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">-- 2 查询员工信息，并且工资等于9000的</span>\n\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">-- 一条sql就完成这个操作。子查询</span>\n\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token operator\">*</span> 子查询不同情况\n\t\t\t<span class=\"token number\">1.</span> 子查询的结果是单行单列的：\n\t\t\t\t<span class=\"token operator\">*</span> 子查询可以作为条件，使用运算符去判断。 运算符： <span class=\"token operator\">></span> <span class=\"token operator\">>=</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&lt;=</span> <span class=\"token operator\">=</span>\n\t\t\t\t<span class=\"token operator\">*</span> \n\t\t\t\t<span class=\"token comment\">-- 查询员工工资小于平均工资的人</span>\n\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token number\">2.</span> 子查询的结果是多行单列的：\n\t\t\t\t<span class=\"token operator\">*</span> 子查询可以作为条件，使用运算符<span class=\"token operator\">in</span>来判断\n\t\t\t\t<span class=\"token comment\">-- 查询'财务部'和'市场部'所有的员工信息</span>\n\t\t\t\t<span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> dept <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'财务部'</span> <span class=\"token operator\">OR</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'市场部'</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> dept_id <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">OR</span> dept_id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">-- 子查询</span>\n\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> dept_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> dept <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'财务部'</span> <span class=\"token operator\">OR</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'市场部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token number\">3.</span> 子查询的结果是多行多列的：\n\t\t\t\t<span class=\"token operator\">*</span> 子查询可以作为一张虚拟表参与查询\n\t\t\t\t<span class=\"token comment\">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span>\n\t\t\t\t<span class=\"token comment\">-- 子查询</span>\n\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> dept t1 <span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>join_date<span class=\"token punctuation\">`</span> <span class=\"token operator\">></span> <span class=\"token string\">'2011-11-11'</span><span class=\"token punctuation\">)</span> t2\n\t\t\t\t<span class=\"token keyword\">WHERE</span> t1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>dept_id<span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token comment\">-- 普通内连接</span>\n\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp t1<span class=\"token punctuation\">,</span>dept t2 <span class=\"token keyword\">WHERE</span> t1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token operator\">AND</span> t1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>join_date<span class=\"token punctuation\">`</span> <span class=\"token operator\">></span>  <span class=\"token string\">'2011-11-11'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</p>\n<ul>\n<li>开启事务： start transaction;</li>\n<li>回滚：rollback;</li>\n<li>提交：commit;</li>\n</ul>\n<p>事务提交的两种方式：</p>\n<p>自动提交：mysql就是自动提交的，一条DML(增删改)语句会自动提交一次事务</p>\n<p>手动提交：Oracle 数据库默认是手动提交事务，需要先开启事务，再提交</p>\n<p>事务的四大特征：</p>\n<ol>\n<li>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</li>\n<li>持久性：当事务提交或回滚后，数据库会持久化的保存数据。</li>\n<li>隔离性：多个事务之间。相互独立。</li>\n<li>一致性：事务操作前后，数据总量不变</li>\n</ol>\n<p>隔离级别：</p>\n<ol>\n<li>read uncommitted：读未提交，产生的问题：脏读、不可重复读、幻读</li>\n<li>read committed：读已提交 （Oracle）产生的问题：不可重复读、幻读</li>\n<li>repeatable read：可重复读 （MySQL默认）产生的问题：幻读</li>\n<li>serializable：串行化，可以解决所有的问题</li>\n</ol>\n<h3 id=\"批量将数据库中的某个字段的部分字符串更新\"><a href=\"#批量将数据库中的某个字段的部分字符串更新\" class=\"headerlink\" title=\"批量将数据库中的某个字段的部分字符串更新\"></a>批量将数据库中的某个字段的部分字符串更新</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> T <span class=\"token keyword\">SET</span> images <span class=\"token operator\">=</span> <span class=\"token keyword\">REPLACE</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">,</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"数据表-A-操作三题\"><a href=\"#数据表-A-操作三题\" class=\"headerlink\" title=\"数据表 A 操作三题\"></a>数据表 A 操作三题</h3><table>\n<thead>\n<tr>\n<th>name</th>\n<th>class</th>\n<th>grade</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>张三</td>\n<td>英语</td>\n<td>31</td>\n</tr>\n<tr>\n<td>张三</td>\n<td>语文</td>\n<td>49</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>数学</td>\n<td>90</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>英语</td>\n<td>45</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>语文</td>\n<td>57</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>化学</td>\n<td>51</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>化学</td>\n<td>70</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>语文</td>\n<td>81</td>\n</tr>\n</tbody></table>\n<ol>\n<li>使用 MySQL 语法。用一个 sql 语句 查询出每门课都小于 60 分的学生姓名</li>\n</ol>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n\tNAME\n<span class=\"token keyword\">FROM</span>\n\tA\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>\n\tNAME\n<span class=\"token keyword\">HAVING</span>\n\t<span class=\"token function\">max</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>\n\tNAME\n<span class=\"token keyword\">FROM</span>\n\tA\n<span class=\"token keyword\">WHERE</span>\n\tNAME <span class=\"token operator\">NOT</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>\n\t\t\tNAME\n\t\t<span class=\"token keyword\">FROM</span>\n\t\t\tA\n\t\t<span class=\"token keyword\">WHERE</span>\n\t\t\tgrade <span class=\"token operator\">>=</span> <span class=\"token number\">60</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>使用 MySQL 语法。用一个 sql 查出出现次数大于 3 次的人名</li>\n</ol>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>\n\tNAME\n<span class=\"token keyword\">FROM</span>\n\tA\n<span class=\"token keyword\">WHERE</span>\n\tNAME <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">SELECT</span>\n\t\t\tNAME\n\t\t<span class=\"token keyword\">FROM</span>\n\t\t\tA\n\t\t<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>\n\t\t\tNAME\n\t\t<span class=\"token keyword\">HAVING</span>\n\t\t\t<span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">3</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>使用 MySQL 语法。用一个 sql 查询以下结果，如果分数 0-59 展示不及格 , 60-79 展示良好，80-100 展示优秀</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>class</th>\n<th>level</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>张三</td>\n<td>英语</td>\n<td>不及格</td>\n</tr>\n<tr>\n<td>张三</td>\n<td>语文</td>\n<td>不及格</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>数学</td>\n<td>优秀</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>英语</td>\n<td>不及格</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>语文</td>\n<td>不及格</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>化学</td>\n<td>不及格</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>化学</td>\n<td>良好</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>语文</td>\n<td>优秀</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span>class<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">CASE</span>\n\t\t<span class=\"token keyword\">WHEN</span> grade <span class=\"token operator\">>=</span> <span class=\"token number\">80</span> <span class=\"token keyword\">THEN</span>\n\t\t\t<span class=\"token string\">'优秀'</span>\n\t\t<span class=\"token keyword\">WHEN</span> grade <span class=\"token operator\">&lt;=</span> <span class=\"token number\">59</span> <span class=\"token keyword\">THEN</span>\n\t\t\t<span class=\"token string\">'不及格'</span>\n\t\t<span class=\"token keyword\">ELSE</span>\n\t\t\t<span class=\"token string\">'良好'</span>\n\t\t<span class=\"token keyword\">END</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">level</span>\n<span class=\"token keyword\">FROM</span>\n\tA<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"合并两个数据表\"><a href=\"#合并两个数据表\" class=\"headerlink\" title=\"合并两个数据表\"></a>合并两个数据表</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> T1 <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> T2<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"输出数据表中相同的字段\"><a href=\"#输出数据表中相同的字段\" class=\"headerlink\" title=\"输出数据表中相同的字段\"></a>输出数据表中相同的字段</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> T <span class=\"token keyword\">where</span> name <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> name <span class=\"token keyword\">from</span> T <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> name <span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"在已有的表中添加列（字段）\"><a href=\"#在已有的表中添加列（字段）\" class=\"headerlink\" title=\"在已有的表中添加列（字段）\"></a>在已有的表中添加列（字段）</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> people <span class=\"token keyword\">ADD</span> name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"删除数据表-A-中-name-字段为空的数据\"><a href=\"#删除数据表-A-中-name-字段为空的数据\" class=\"headerlink\" title=\"删除数据表 A 中 name 字段为空的数据\"></a>删除数据表 A 中 name 字段为空的数据</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> A <span class=\"token keyword\">where</span> name <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"查询科目语文分数大于-90-分的学生列表\"><a href=\"#查询科目语文分数大于-90-分的学生列表\" class=\"headerlink\" title=\"查询科目语文分数大于 90 分的学生列表\"></a>查询科目语文分数大于 90 分的学生列表</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">where</span> id <span class=\"token operator\">in</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">from</span> B <span class=\"token keyword\">WHERE</span> score<span class=\"token operator\">></span><span class=\"token number\">90</span> <span class=\"token operator\">and</span> SUBJECT <span class=\"token operator\">=</span> <span class=\"token string\">\"语文\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"查询名字为张三的所有科目的成绩\"><a href=\"#查询名字为张三的所有科目的成绩\" class=\"headerlink\" title=\"查询名字为张三的所有科目的成绩\"></a>查询名字为张三的所有科目的成绩</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> B <span class=\"token keyword\">where</span> id <span class=\"token operator\">in</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">from</span> A <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"实体类注解\"><a href=\"#实体类注解\" class=\"headerlink\" title=\"实体类注解\"></a>实体类注解</h3><ol>\n<li>表名默认使用类名,驼峰转下划线(只对大写字母进行处理),如<code>UserInfo</code>默认对应的表名为<code>user_info</code>。</li>\n<li>表名可以使用<code>@Table(name = &quot;tableName&quot;)</code>进行指定,对不符合第一条默认规则的可以通过这种方式指定表名.</li>\n<li>字段默认和<code>@Column</code>一样,都会作为表字段,表字段默认为Java对象的<code>Field</code>名字驼峰转下划线形式.</li>\n<li>可以使用<code>@Column(name = &quot;fieldName&quot;)</code>指定不符合第3条规则的字段名</li>\n<li>使用<code>@Transient</code>注解可以忽略字段,添加该注解的字段不会作为表字段使用.如果你的实体类中包含了不是数据库表中的字段，你需要给这个字段加上<code>@Transient</code>注解，这样通用Mapper在处理单表操作时就不会将标注的属性当成表字段处理！</li>\n<li><strong>建议一定是有一个<code>@Id</code>注解作为主键的字段,可以有多个<code>@Id</code>注解的字段作为联合主键.</strong></li>\n<li><strong>默认情况下,实体类中如果不存在包含<code>@Id</code>注解的字段,所有的字段都会作为主键字段进行使用(这种效率极低).</strong></li>\n<li>实体类可以继承使用,可以参考测试代码中的<code>tk.mybatis.mapper.model.UserLogin2</code>类.</li>\n<li>由于基本类型,如int作为实体类字段时会有默认值0,而且无法消除,所以实体类中建议不要使用基本类型.</li>\n<li>主键回显：@GeneratedValue(strategy  = GenerationType.IDENTITY)</li>\n</ol>\n<h3 id=\"常用接口方法\"><a href=\"#常用接口方法\" class=\"headerlink\" title=\"常用接口方法\"></a>常用接口方法</h3><h4 id=\"基础接口\"><a href=\"#基础接口\" class=\"headerlink\" title=\"基础接口\"></a>基础接口</h4><h5 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h5><p>接口：<code>SelectMapper</code><br>方法：<code>List select(T record);</code><br>说明：根据实体中的属性值进行查询，查询条件使用等号</p>\n<p>接口：<code>SelectByPrimaryKeyMapper</code><br>方法：<code>T selectByPrimaryKey(Object key);</code><br>说明：根据主键字段进行查询，方法参数必须包含完整的主键属性，查询条件使用等号</p>\n<p>接口：<code>SelectAllMapper</code><br>方法：<code>List selectAll();</code><br>说明：查询全部结果，select(null)方法能达到同样的效果</p>\n<p>接口：<code>SelectOneMapper</code><br>方法：<code>T selectOne(T record);</code><br>说明：根据实体中的属性进行查询，只能有一个返回值，有多个结果是抛出异常，查询条件使用等号</p>\n<p>接口：<code>SelectCountMapper</code><br>方法：<code>int selectCount(T record);</code><br>说明：根据实体中的属性查询总数，查询条件使用等号</p>\n<h5 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h5><p>接口：<code>InsertMapper</code><br>方法：<code>int insert(T record);</code><br>说明：保存一个实体，null的属性也会保存，不会使用数据库默认值</p>\n<p>接口：<code>InsertSelectiveMapper</code><br>方法：<code>int insertSelective(T record);</code><br>说明：保存一个实体，null的属性不会保存，会使用数据库默认值</p>\n<h5 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h5><p>接口：<code>UpdateByPrimaryKeyMapper</code><br>方法：<code>int updateByPrimaryKey(T record);</code><br>说明：根据主键更新实体全部字段，null值会被更新</p>\n<p>接口：<code>UpdateByPrimaryKeySelectiveMapper</code><br>方法：<code>int updateByPrimaryKeySelective(T record);</code><br>说明：根据主键更新属性不为null的值</p>\n<h5 id=\"Delete\"><a href=\"#Delete\" class=\"headerlink\" title=\"Delete\"></a>Delete</h5><p>接口：<code>DeleteMapper</code><br>方法：<code>int delete(T record);</code><br>说明：根据实体属性作为条件进行删除，查询条件使用等号</p>\n<p>接口：<code>DeleteByPrimaryKeyMapper</code><br>方法：<code>int deleteByPrimaryKey(Object key);</code><br>说明：根据主键字段进行删除，方法参数必须包含完整的主键属性</p>\n<h5 id=\"base-组合接口\"><a href=\"#base-组合接口\" class=\"headerlink\" title=\"base 组合接口\"></a>base 组合接口</h5><p>接口：<code>BaseSelectMapper</code><br>方法：包含上面Select的4个方法</p>\n<p>接口：<code>BaseInsertMapper</code><br>方法：包含上面Insert的2个方法</p>\n<p>接口：<code>BaseUpdateMapper</code><br>方法：包含上面Update的2个方法</p>\n<p>接口：<code>BaseDeleteMapper</code><br>方法：包含上面Delete的2个方法</p>\n<h5 id=\"CRUD-组合接口\"><a href=\"#CRUD-组合接口\" class=\"headerlink\" title=\"CRUD 组合接口\"></a>CRUD 组合接口</h5><p>接口：<code>BaseMapper</code><br>方法：继承了base组合接口中的4个组合接口，包含完整的CRUD方法</p>\n<h4 id=\"Example-方法\"><a href=\"#Example-方法\" class=\"headerlink\" title=\"Example 方法\"></a>Example 方法</h4><p>接口：<code>SelectByExampleMapper</code><br>方法：<code>List selectByExample(Object example);</code><br>说明：根据Example条件进行查询<br><strong>重点：</strong>这个查询支持通过<code>Example</code>类指定查询列，通过<code>selectProperties</code>方法指定查询列</p>\n<p>接口：<code>SelectCountByExampleMapper</code><br>方法：<code>int selectCountByExample(Object example);</code><br>说明：根据Example条件进行查询总数</p>\n<p>接口：<code>UpdateByExampleMapper</code><br>方法：<code>int updateByExample(@Param(&quot;record&quot;) T record, @Param(&quot;example&quot;) Object example);</code><br>说明：根据Example条件更新实体<code>record</code>包含的全部属性，null值会被更新</p>\n<p>接口：<code>UpdateByExampleSelectiveMapper</code><br>方法：<code>int updateByExampleSelective(@Param(&quot;record&quot;) T record, @Param(&quot;example&quot;) Object example);</code><br>说明：根据Example条件更新实体<code>record</code>包含的不是null的属性值</p>\n<p>接口：<code>DeleteByExampleMapper</code><br>方法：<code>int deleteByExample(Object example);</code><br>说明：根据Example条件删除数据</p>\n<h5 id=\"Example-组合接口\"><a href=\"#Example-组合接口\" class=\"headerlink\" title=\"Example 组合接口\"></a>Example 组合接口</h5><p>接口：<code>ExampleMapper</code><br>方法：包含上面Example中的5个方法</p>\n<h4 id=\"Condition-方法\"><a href=\"#Condition-方法\" class=\"headerlink\" title=\"Condition 方法\"></a>Condition 方法</h4><p>Condition方法和Example方法作用完全一样，只是为了避免Example带来的歧义，提供的的Condition方法</p>\n<p>接口：<code>SelectByConditionMapper</code><br>方法：<code>List selectByCondition(Object condition);</code><br>说明：根据Condition条件进行查询</p>\n<p>接口：<code>SelectCountByConditionMapper</code><br>方法：<code>int selectCountByCondition(Object condition);</code><br>说明：根据Condition条件进行查询总数</p>\n<p>接口：<code>UpdateByConditionMapper</code><br>方法：<code>int updateByCondition(@Param(&quot;record&quot;) T record, @Param(&quot;example&quot;) Object condition);</code><br>说明：根据Condition条件更新实体<code>record</code>包含的全部属性，null值会被更新</p>\n<p>接口：<code>UpdateByConditionSelectiveMapper</code><br>方法：<code>int updateByConditionSelective(@Param(&quot;record&quot;) T record, @Param(&quot;example&quot;) Object condition);</code><br>说明：根据Condition条件更新实体<code>record</code>包含的不是null的属性值</p>\n<p>接口：<code>DeleteByConditionMapper</code><br>方法：<code>int deleteByCondition(Object condition);</code><br>说明：根据Condition条件删除数据</p>\n<h5 id=\"Condition-组合接口\"><a href=\"#Condition-组合接口\" class=\"headerlink\" title=\"Condition 组合接口\"></a>Condition 组合接口</h5><p>接口：<code>ConditionMapper</code><br>方法：包含上面Condition中的5个方法</p>\n<h4 id=\"RowBounds\"><a href=\"#RowBounds\" class=\"headerlink\" title=\"RowBounds\"></a>RowBounds</h4><p>默认为<strong>内存分页</strong>，可以配合<a href=\"http://git.oschina.net/free/Mybatis_PageHelper\">PageHelper</a>实现物理分页</p>\n<p>接口：<code>SelectRowBoundsMapper</code><br>方法：<code>List selectByRowBounds(T record, RowBounds rowBounds);</code><br>说明：根据实体属性和RowBounds进行分页查询</p>\n<p>接口：<code>SelectByExampleRowBoundsMapper</code><br>方法：<code>List selectByExampleAndRowBounds(Object example, RowBounds rowBounds);</code><br>说明：根据example条件和RowBounds进行分页查询</p>\n<p>接口：<code>SelectByConditionRowBoundsMapper</code><br>方法：<code>List selectByConditionAndRowBounds(Object condition, RowBounds rowBounds);</code><br>说明：根据example条件和RowBounds进行分页查询，该方法和selectByExampleAndRowBounds完全一样，只是名字改成了Condition</p>\n<h5 id=\"RowBounds-组合接口\"><a href=\"#RowBounds-组合接口\" class=\"headerlink\" title=\"RowBounds 组合接口\"></a>RowBounds 组合接口</h5><p>接口：<code>RowBoundsMapper</code><br>方法：包含上面RowBounds中的前两个方法，不包含<code>selectByConditionAndRowBounds</code></p>\n<h4 id=\"special-特殊接口\"><a href=\"#special-特殊接口\" class=\"headerlink\" title=\"special 特殊接口\"></a>special 特殊接口</h4><p>这些接口针对部分数据库设计，不是所有数据库都支持</p>\n<p>接口：<code>InsertListMapper</code><br>方法：<code>int insertList(List recordList);</code><br>说明：批量插入，支持批量插入的数据库可以使用，例如MySQL,H2等，另外该接口限制实体包含<code>id</code>属性并且必须为自增列</p>\n<p>接口：<code>InsertUseGeneratedKeysMapper</code><br>方法：<code>int insertUseGeneratedKeys(T record);</code><br>说明：插入数据，限制为实体包含<code>id</code>属性并且必须为自增列，实体配置的主键策略无效</p>\n<h4 id=\"MySQL-专用\"><a href=\"#MySQL-专用\" class=\"headerlink\" title=\"MySQL 专用\"></a>MySQL 专用</h4><p>接口：<code>MySqlMapper</code><br>继承方法：<code>int insertList(List recordList);</code><br>继承方法：<code>int insertUseGeneratedKeys(T record);</code><br>说明：该接口不包含方法，继承了special中的<code>InsertListMapper</code>和<code>InsertUseGeneratedKeysMapper</code></p>\n<h3 id=\"Jsp-四个作用域九个内置对象\"><a href=\"#Jsp-四个作用域九个内置对象\" class=\"headerlink\" title=\"Jsp 四个作用域九个内置对象\"></a>Jsp 四个作用域九个内置对象</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用域</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>application</td>\n<td>在所有应用程序中有效</td>\n</tr>\n<tr>\n<td>session</td>\n<td>在当前会话中有效</td>\n</tr>\n<tr>\n<td>request</td>\n<td>在当前请求中有效</td>\n</tr>\n<tr>\n<td>page</td>\n<td>在当前页面有效</td>\n</tr>\n</tbody></table>\n<p>out，request，response，session，application，pageContext，page，config，exception</p>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Alt+Enter</td>\n<td>导入包，自动修正代码</td>\n</tr>\n<tr>\n<td>Ctrl+Y</td>\n<td>删除光标所在行</td>\n</tr>\n<tr>\n<td>Ctrl+D</td>\n<td>复制光标所在行的内容，插入光标位置下面</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+L</td>\n<td>格式化代码</td>\n</tr>\n<tr>\n<td>Ctrl+/</td>\n<td>单行注释</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+/</td>\n<td>选中代码注释，多行注释，再按取消注释</td>\n</tr>\n<tr>\n<td>Alt+Ins</td>\n<td>自动生成代码，toString，get，set等方法</td>\n</tr>\n<tr>\n<td>Alt+Shift+上下箭头</td>\n<td>移动当前代码行</td>\n</tr>\n</tbody></table>\n<h3 id=\"IDEA-将包展开\"><a href=\"#IDEA-将包展开\" class=\"headerlink\" title=\"IDEA 将包展开\"></a>IDEA 将包展开</h3><p>右键项目目录左边竖向的<code>Project</code>按钮，取消勾选<code>Compact Middle Packages</code>。</p>\n<h3 id=\"IDEA-设置项目文件夹类型\"><a href=\"#IDEA-设置项目文件夹类型\" class=\"headerlink\" title=\"IDEA 设置项目文件夹类型\"></a>IDEA 设置项目文件夹类型</h3><ul>\n<li><p>在任意需要更改类型的文件夹上右键选择<code>Make Directory as</code>。</p>\n</li>\n<li><p><code>File</code>-<code>Project Structure</code>-<code>Modules</code>。</p>\n</li>\n</ul>\n<h3 id=\"IDEA设置背景图片\"><a href=\"#IDEA设置背景图片\" class=\"headerlink\" title=\"IDEA设置背景图片\"></a>IDEA设置背景图片</h3><ul>\n<li><p>双击shift搜索</p>\n</li>\n<li><p>输入image</p>\n</li>\n</ul>\n<h3 id=\"Cannot-access-org-springframework-context-ConfigurableApplicationContext\"><a href=\"#Cannot-access-org-springframework-context-ConfigurableApplicationContext\" class=\"headerlink\" title=\"Cannot access org.springframework.context.ConfigurableApplicationContext\"></a>Cannot access org.springframework.context.ConfigurableApplicationContext</h3><p>新导入项目，提示报 Cannot access org.springframework.context.ConfigurableApplicationContext的错，百度一番，需删除导入项目自动生成的xxx.iml ，然后刷新下右侧maven tab即可，这里记录一下。</p>\n<h3 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h3><p>在需要创建版本库的目录下执行：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>会创建一个隐藏的<code>.git</code>目录。</p>\n<h3 id=\"Git-工作流程\"><a href=\"#Git-工作流程\" class=\"headerlink\" title=\"Git 工作流程\"></a>Git 工作流程</h3><ol>\n<li>从远程仓库克隆项目至本地：</li>\n</ol>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git clone https://github.com/luhexyz/site-Blog.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>在本地仓库中<code>checkout</code>代码并修改；</li>\n<li>将代码提交到暂存区：</li>\n</ol>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git add .<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>提交修改到本地仓库：</li>\n</ol>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git commit -m <span class=\"token string\">\"message\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"5\">\n<li>将改动推送到远程仓库：</li>\n</ol>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git push<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"6\">\n<li>从远程仓库拉取并合并代码：</li>\n</ol>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git pull<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"Git-设置代理\"><a href=\"#Git-设置代理\" class=\"headerlink\" title=\"Git 设置代理\"></a>Git 设置代理</h3><p>Windows 下的命令行 CMD 设置代理：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">set https_proxy=http://127.0.0.1:1080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>在 Git 里设置代理：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git config --global https.proxy https://127.0.0.1:1080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>取消代理：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git config --global --unset https.proxy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>macOS 下的命令设置代理：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">export https_proxy=socks5://127.0.0.1:7891<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"添加子模块\"><a href=\"#添加子模块\" class=\"headerlink\" title=\"添加子模块\"></a>添加子模块</h3><pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git submodule add &lt;url> &lt;path><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>此时子模块文件夹里是空的，在项目根目录执行：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git submodule initgit submodule update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>或者：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git submodule update --init --recursive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>即可下载子模块代码。</p>\n<p>若在整个项目<code>clone</code>时添加<code>--recursive</code>，也可以下载子模块代码：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git clone --recursive https://github.com/luhexyz/site-Blog.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"删除子模块\"><a href=\"#删除子模块\" class=\"headerlink\" title=\"删除子模块\"></a>删除子模块</h3><p><code>Kepler</code>为子模块名。</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">git rm --cached Kepler\nrm -rf Kepler<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>删除<code>.gitmodules</code>文件中的相关模块信息：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">[submodule <span class=\"token string\">\"Kepler\"</span>]\n  path = Kepler\n  url = https://github.com/AlanDecode/Maverick-Theme-Kepler.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n<p>删除<code>.git/config</code>中的相关子模块信息：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">[submodule <span class=\"token string\">\"Kepler\"</span>]\n  url = https://github.com/AlanDecode/Maverick-Theme-Kepler.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>删除<code>.git</code>文件夹中的相关子模块文件：</p>\n<pre class=\"line-numbers language-git\" data-language=\"git\"><code class=\"language-git\">rm -rf .git/modules/Kepler<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","text":"JRE 和 JDK JRE：Java 程序的运行时环境，包含 JVM 和运行时所需要的核心类库 。 JDK：Java 程序开发工具包，包含 JRE 和开发人员使用的工具。 编译和运行 编译：指将编写的 Java 源文件翻译成 JVM 能认识的 class 字节码文件，javac ...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"Share","slug":"Share","count":4,"path":"api/categories/Share.json"}],"tags":[{"name":"Dev","slug":"Dev","count":4,"path":"api/tags/Dev.json"},{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JRE-%E5%92%8C-JDK\"><span class=\"toc-text\">JRE 和 JDK</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">编译和运行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">引用数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">数据类型转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ASCII-%E7%BC%96%E7%A0%81%E8%A1%A8\"><span class=\"toc-text\">ASCII 编码表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99\"><span class=\"toc-text\">重载和重写</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F\"><span class=\"toc-text\">Java 内存区域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">类和对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">成员变量的默认值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">面向对象三大基本特征</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Scanner-%E5%92%8C-Random\"><span class=\"toc-text\">Scanner 和 Random</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-%E9%9B%86%E5%90%88\"><span class=\"toc-text\">Java 集合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8E-equals\"><span class=\"toc-text\">&#x3D;&#x3D; 与 equals</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#String-%E7%B1%BB\"><span class=\"toc-text\">String 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#static-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">static 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Arrays-%E7%B1%BB\"><span class=\"toc-text\">Arrays 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Math-%E7%B1%BB\"><span class=\"toc-text\">Math 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#final-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">final 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">权限修饰符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB\"><span class=\"toc-text\">匿名内部类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Object-%E7%B1%BB\"><span class=\"toc-text\">Object 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Date-%E7%B1%BB\"><span class=\"toc-text\">Date 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DateFormat-%E7%B1%BB\"><span class=\"toc-text\">DateFormat 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#System-%E7%B1%BB\"><span class=\"toc-text\">System 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#StringBuilder-%E7%B1%BB\"><span class=\"toc-text\">StringBuilder 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%85%E8%A3%85%E7%B1%BB\"><span class=\"toc-text\">包装类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">基本类型和字符串之间的转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Collection-%E9%9B%86%E5%90%88\"><span class=\"toc-text\">Collection 集合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Iterator-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Iterator 接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">泛型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">常见的数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Collections-%E5%B7%A5%E5%85%B7%E7%B1%BB\"><span class=\"toc-text\">Collections 工具类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#comparable-%E5%92%8C-comparator-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">comparable 和 comparator 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Throwable-%E7%B1%BB\"><span class=\"toc-text\">Throwable 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Exception-%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">Exception 分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E5%8F%91%E5%92%8C%E5%B9%B6%E8%A1%8C\"><span class=\"toc-text\">并发和并行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">线程和进程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">线程的几种状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">创建线程的方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Thread-%E5%92%8C-Runnable-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">Thread 和 Runnable 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E8%B0%83%E7%94%A8-start-%E6%96%B9%E6%B3%95%E6%97%B6%E4%BC%9A%E6%89%A7%E8%A1%8C-run-%E6%96%B9%E6%B3%95%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8-run-%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#synchronized-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">synchronized 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E8%AF%B4-sleep-%E6%96%B9%E6%B3%95%E5%92%8C-wait-%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB%E5%92%8C%E5%85%B1%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">说说 sleep() 方法和 wait() 方法区别和共同点?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">使用线程池的步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#File-%E7%B1%BB\"><span class=\"toc-text\">File 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92\"><span class=\"toc-text\">递归</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">文件过滤器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">字节流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E8%8A%82%E8%BE%93%E5%87%BA%E6%B5%81-OutputStream\"><span class=\"toc-text\">字节输出流 OutputStream</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA%E6%B5%81-FileOutputStream\"><span class=\"toc-text\">文件输出流 FileOutputStream</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E8%8A%82%E8%BE%93%E5%85%A5%E6%B5%81-InputStream\"><span class=\"toc-text\">字节输入流 InputStream</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E6%B5%81-FileInputStream\"><span class=\"toc-text\">文件输入流 FileInputStream</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E6%B5%81\"><span class=\"toc-text\">字符流</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%86%B2%E6%B5%81\"><span class=\"toc-text\">缓冲流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81%EF%BC%9ABufferedInputStream%EF%BC%8CBufferedOutputStream\"><span class=\"toc-text\">字节缓冲流：BufferedInputStream，BufferedOutputStream</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E7%BC%93%E5%86%B2%E6%B5%81%EF%BC%9ABufferedReader%EF%BC%8CBufferedWriter\"><span class=\"toc-text\">字符缓冲流：BufferedReader，BufferedWriter</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E6%8D%A2%E6%B5%81\"><span class=\"toc-text\">转换流</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">序列化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TCP-IP-%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">TCP&#x2F;IP 协议</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Socket-%E7%B1%BB\"><span class=\"toc-text\">Socket 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">注解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84\"><span class=\"toc-text\">反射</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%9C%80%E6%96%B0%E7%9A%84-springboot%E2%80%932-2-6-RELEASE-%E4%B8%8B%E8%BD%BD-dependencies\"><span class=\"toc-text\">如何解决无法使用最新的 springboot–2.2.6.RELEASE 下载 dependencies</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RestController-%E5%86%99%E5%9C%A8%E7%B1%BB%E4%B8%8A%EF%BC%8C%E5%AF%BC%E8%87%B4%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E5%85%A8%E9%83%A8%E8%BF%94%E5%9B%9E%E4%BA%86-json-%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%E8%B7%B3%E8%BD%AC%E5%88%B0%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">@RestController 写在类上，导致类中的方法全部返回了 json 数据，无法通过视图解析器跳转到页面</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Repository-%E5%92%8C-Mapper-%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">@Repository 和 @Mapper 注解的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E9%80%9A%E7%9F%A5\"><span class=\"toc-text\">前置通知</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MVC-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">MVC 设计模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SpringMVC-%E4%B8%AD%E8%BF%94%E5%9B%9E-String-%E6%97%B6-return-%E7%9A%84%E5%86%99%E6%B3%95\"><span class=\"toc-text\">SpringMVC 中返回 String 时 return 的写法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8E-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">#{} 与 ${} 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MyBatis-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">MyBatis 设计模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MyBatis-%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E4%BA%8B%E5%8A%A1%E7%9A%84%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">MyBatis 自动提交事务的设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mybatis-%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">Mybatis 延迟加载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mybatis-%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">Mybatis 缓存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mybatis-%E6%8E%A5%E5%8F%A3%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">Mybatis 接口绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mybatis-%E5%92%8C-hebernate\"><span class=\"toc-text\">Mybatis 和 hebernate</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mybatis-%E6%A0%B8%E5%BF%83%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">Mybatis 核心对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySQL5-7-%E4%B9%8B%E5%90%8E%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">MySQL5.7 之后修改默认密码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%88%A0%E6%94%B9\"><span class=\"toc-text\">增删改</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E5%88%86%E7%BB%84\"><span class=\"toc-text\">排序分组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">多表查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">事务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%B9%E9%87%8F%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E9%83%A8%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">批量将数据库中的某个字段的部分字符串更新</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E8%A1%A8-A-%E6%93%8D%E4%BD%9C%E4%B8%89%E9%A2%98\"><span class=\"toc-text\">数据表 A 操作三题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%95%B0%E6%8D%AE%E8%A1%A8\"><span class=\"toc-text\">合并两个数据表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B8%AD%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">输出数据表中相同的字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%B7%B2%E6%9C%89%E7%9A%84%E8%A1%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%88%97%EF%BC%88%E5%AD%97%E6%AE%B5%EF%BC%89\"><span class=\"toc-text\">在已有的表中添加列（字段）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E8%A1%A8-A-%E4%B8%AD-name-%E5%AD%97%E6%AE%B5%E4%B8%BA%E7%A9%BA%E7%9A%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">删除数据表 A 中 name 字段为空的数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E7%A7%91%E7%9B%AE%E8%AF%AD%E6%96%87%E5%88%86%E6%95%B0%E5%A4%A7%E4%BA%8E-90-%E5%88%86%E7%9A%84%E5%AD%A6%E7%94%9F%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">查询科目语文分数大于 90 分的学生列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E5%90%8D%E5%AD%97%E4%B8%BA%E5%BC%A0%E4%B8%89%E7%9A%84%E6%89%80%E6%9C%89%E7%A7%91%E7%9B%AE%E7%9A%84%E6%88%90%E7%BB%A9\"><span class=\"toc-text\">查询名字为张三的所有科目的成绩</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BD%93%E7%B1%BB%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">实体类注解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">常用接口方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">基础接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Select\"><span class=\"toc-text\">Select</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Insert\"><span class=\"toc-text\">Insert</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Update\"><span class=\"toc-text\">Update</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Delete\"><span class=\"toc-text\">Delete</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#base-%E7%BB%84%E5%90%88%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">base 组合接口</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#CRUD-%E7%BB%84%E5%90%88%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">CRUD 组合接口</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Example-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Example 方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Example-%E7%BB%84%E5%90%88%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Example 组合接口</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Condition-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Condition 方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Condition-%E7%BB%84%E5%90%88%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Condition 组合接口</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#RowBounds\"><span class=\"toc-text\">RowBounds</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#RowBounds-%E7%BB%84%E5%90%88%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">RowBounds 组合接口</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#special-%E7%89%B9%E6%AE%8A%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">special 特殊接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#MySQL-%E4%B8%93%E7%94%A8\"><span class=\"toc-text\">MySQL 专用</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Jsp-%E5%9B%9B%E4%B8%AA%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B9%9D%E4%B8%AA%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">Jsp 四个作用域九个内置对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE\"><span class=\"toc-text\">常用快捷键</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IDEA-%E5%B0%86%E5%8C%85%E5%B1%95%E5%BC%80\"><span class=\"toc-text\">IDEA 将包展开</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IDEA-%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E5%A4%B9%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">IDEA 设置项目文件夹类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IDEA%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87\"><span class=\"toc-text\">IDEA设置背景图片</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cannot-access-org-springframework-context-ConfigurableApplicationContext\"><span class=\"toc-text\">Cannot access org.springframework.context.ConfigurableApplicationContext</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%89%88%E6%9C%AC%E5%BA%93\"><span class=\"toc-text\">创建版本库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Git-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">Git 工作流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Git-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">Git 设置代理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%AD%90%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">添加子模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%AD%90%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">删除子模块</span></a></li></ol>","author":{"name":"XiaoJun","slug":"blog-author","avatar":"https://pic.cuonc.com/2020/01/27/e430dac3281e8.gif","link":"/","description":"HelloWorld!!!","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"","customs":{"facebook":{"icon":"https://pic.cuonc.com/2021/12/12/d717926871198.svg","link":"https://facebook.com"}}}},"mapped":true,"prev_post":{"title":"这是一篇水文","uid":"0939f19850519632467a0c98d88676b0","slug":"Test","date":"2021-12-11T09:46:09.000Z","updated":"2021-12-12T09:47:07.814Z","comments":true,"path":"api/articles/Test.json","keywords":null,"cover":"https://pics.cuonc.com/2021/12/11/3f206b564edb7c3daedc24eb12817269.jpg","text":" 标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。 虽然你可以使用任何格式书写你的文章，但是标签插件永远可用，且语法也都是一致的。 ","link":"","photos":[],"count_time":{"symbolsCount":97,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"WDNMD","slug":"WDNMD","count":1,"path":"api/tags/WDNMD.json"}],"author":{"name":"XiaoJun","slug":"blog-author","avatar":"https://pic.cuonc.com/2020/01/27/e430dac3281e8.gif","link":"/","description":"HelloWorld!!!","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"","customs":{"facebook":{"icon":"https://pic.cuonc.com/2021/12/12/d717926871198.svg","link":"https://facebook.com"}}}},"feature":true},"next_post":{"title":"Git常用指令","uid":"06d127301ffc1444453dc11ac11c2684","slug":"Git常用指令","date":"2021-12-12T09:41:20.000Z","updated":"2021-12-12T09:44:19.729Z","comments":true,"path":"api/articles/Git常用指令.json","keywords":null,"cover":"https://pics.cuonc.com/2021/12/04/68a6a40bf22f1207593ec286f22a2ee2.jpg","text":"git常用命令一、git常用命令（实用版） git init 初始化仓库 git status 查看git状态 git add . git commit -m '注释' git remote add origin 仓库地址 git pull origin master 拉取 （注...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"Share","slug":"Share","count":4,"path":"api/categories/Share.json"}],"tags":[{"name":"Dev","slug":"Dev","count":4,"path":"api/tags/Dev.json"},{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"author":{"name":"XiaoJun","slug":"blog-author","avatar":"https://pic.cuonc.com/2020/01/27/e430dac3281e8.gif","link":"/","description":"HelloWorld!!!","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"","customs":{"facebook":{"icon":"https://pic.cuonc.com/2021/12/12/d717926871198.svg","link":"https://facebook.com"}}}}}}