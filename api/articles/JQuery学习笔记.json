{"title":"JQuery学习笔记","uid":"4be01b23fb7cc7676bc872b4679155c2","slug":"JQuery学习笔记","date":"2021-12-18T08:59:13.000Z","updated":"2021-12-18T09:19:48.820Z","comments":true,"path":"api/articles/JQuery学习笔记.json","keywords":null,"cover":"https://pic.cuonc.com/2021/12/18/41f53f03839fe.jpg","content":"<h1 id=\"jquery笔记\"><a href=\"#jquery笔记\" class=\"headerlink\" title=\"jquery笔记\"></a>jquery笔记</h1><h4 id=\"层级选择器\"><a href=\"#层级选择器\" class=\"headerlink\" title=\"层级选择器\"></a><strong>层级选择器</strong></h4><ul>\n<li><code>jQuery</code>层级选择器—-包含选择器、子选择器、相邻选择器、兄弟选择器4种</li>\n<li>a.包含选择器：<code>$(&quot;a b&quot;)</code>在给定的祖先元素下匹配所有后代元素。(不受层级限制)</li>\n<li>b.子选择器：<code>$(&quot;parent &gt; child&quot;)</code>在给定的父元素下匹配所有子元素。</li>\n<li>c.相邻选择器：<code>$(&quot;prev + next&quot;)</code> 匹配所有紧接在<code>prev</code>元素后的<code>next</code>元素。</li>\n<li>d.兄弟选择器：<code>$(&quot;prev ~ siblings&quot;)</code> 匹配prev元素之后的所有<code>sibling</code>元素。</li>\n</ul>\n<h6 id=\"jQuery-元素选择器\"><a href=\"#jQuery-元素选择器\" class=\"headerlink\" title=\"jQuery 元素选择器\"></a>jQuery 元素选择器</h6><p>$(“p”) 选取 <p> 元素。</p>\n<p>$(“p.intro”) 选取所有 class=”intro” 的 <p> 元素。</p>\n<p>$(“p#demo”) 选取所有 id=”demo” 的 <p> 元素。</p>\n<h6 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h6><p><strong>一、基本过滤选择</strong></p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:first</code></td>\n<td>匹配找到的第1个元素</td>\n<td>单个元素</td>\n</tr>\n<tr>\n<td><code>:last</code></td>\n<td>匹配找到的最后一个元素</td>\n<td>单个元素</td>\n</tr>\n<tr>\n<td><code>:eq</code></td>\n<td>匹配一个给定索引值的元素</td>\n<td>单个元素</td>\n</tr>\n<tr>\n<td><code>:even</code></td>\n<td>匹配所有索引值为偶数的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>: odd</code></td>\n<td>匹配所有索引值为奇数的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:gt(index)</code></td>\n<td>匹配所有大于给定索引值的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:lt(index)</code></td>\n<td>匹配所有小于给定索引值的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:not</code></td>\n<td>去除所有与给定选择器匹配的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:animated</code></td>\n<td>选取当前正在执行动画的所有元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>focus</code></td>\n<td>选取当前正在获取焦点的元素</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<p><strong>二、内容过滤选择器</strong></p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>描述</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:contains(text)</code></td>\n<td>选取含有文本内容为text的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:empty</code></td>\n<td>选取不包含子元素获取文本的空元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:has(selector)</code></td>\n<td>选择含有选择器所匹配的元素的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:parent</code></td>\n<td>选取含有子元素或者文本的元素</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<p><strong>三、可见过滤选择器</strong></p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>描述</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:hidden</code></td>\n<td>选择所有不可见的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:visible</code></td>\n<td>选取所有可见的元素</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<p><strong>四、属性过滤选择器</strong></p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>[attribute]</code></td>\n<td>选取拥有此属性的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>[attribute=value]</code></td>\n<td>选取属性值为<code>value</code>值的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>[attribue^=value]</code></td>\n<td>选取属性的值以<code>value</code>开始的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>[attribue$=value]</code></td>\n<td>选取属性的值以<code>value</code>结束的元素</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<p><strong>五、子元素过滤选择器</strong></p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:nth-child(index/even/odd)</code></td>\n<td>选取每个父元素下的第index个子元素或者奇偶元素（<code>index</code>从<code>1</code>算起）</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:first-child</code></td>\n<td>选取每个元素的第一个子元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:last-child</code></td>\n<td>选取每个元素的最后一个子元素</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<p><code>nth-child()</code>选择器是很常用的子元素过滤选择器，如下</p>\n<ol>\n<li><code>:nth-child(even)</code>选择每个父元素下的索引值是偶数的元素</li>\n<li><code>:nth-child(odd)</code>选择每个父元素下的索引值是奇数的元素</li>\n<li><code>:nth-child(2)</code>选择每个父元素下的索引值是<code>2</code>的元素</li>\n<li><code>:nth-child(3n)</code>选择每个父元素下的索引值是3的倍数的元素 (<code>n</code>从<code>1</code>开始)</li>\n</ol>\n<p><strong>六、表单选择器</strong></p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:input</code></td>\n<td>选取所有<code>input</code> <code>textarea</code> <code>select</code> <code>button</code>元素</td>\n</tr>\n<tr>\n<td><code>:text</code></td>\n<td>选取所有单行文本框</td>\n</tr>\n<tr>\n<td><code>:password</code></td>\n<td>选取所有密码框</td>\n</tr>\n<tr>\n<td><code>:radio</code></td>\n<td>选取所有单选框</td>\n</tr>\n<tr>\n<td><code>:checkbox</code></td>\n<td>选取所有多选框</td>\n</tr>\n<tr>\n<td><code>:submit</code></td>\n<td>选取所有的提交按钮</td>\n</tr>\n<tr>\n<td><code>:image</code></td>\n<td>选取所有的图像按钮</td>\n</tr>\n<tr>\n<td><code>:reset</code></td>\n<td>选取所有的重置按钮</td>\n</tr>\n<tr>\n<td><code>:button</code></td>\n<td>选取所有的按钮</td>\n</tr>\n<tr>\n<td><code>:file</code></td>\n<td>选取所有的上传域</td>\n</tr>\n<tr>\n<td><code>:hidden</code></td>\n<td>选取所有的不可见元素</td>\n</tr>\n</tbody></table>\n<p><strong>七、特定位置选择器</strong></p>\n<ul>\n<li><code>:first</code></li>\n<li><code>:last</code></li>\n<li><code>:eq(index)</code></li>\n</ul>\n<p><strong>八、指定范围选择器</strong></p>\n<ul>\n<li><code>:even</code></li>\n<li><code>:odd</code></li>\n<li><code>:gt(index)</code></li>\n<li><code>:lt(index)</code></li>\n</ul>\n<p><strong>九、排除选择器</strong></p>\n<ul>\n<li><code>:not</code> 非</li>\n</ul>\n<p><strong>十、使用过滤器</strong></p>\n<ul>\n<li><p><code>jQuery</code>提供了<code>2</code>种选择文档元素的方式：选择器和过滤器</p>\n<p>​    a. 类过虑器：根据元素的类属性来进行过滤操作。</p>\n<ul>\n<li><code>hasClass(className)</code>：判断当前<code>jQuery</code>对象中的某个元素是否包含指定类名，包含返回<code>true</code>，不包含返回<code>false</code></li>\n</ul>\n<p>​    b. 下标过滤器：精确选出指定下标元素</p>\n<ul>\n<li><p><code>eq(index)</code>：获取第<code>N</code>个元素。<code>index</code>是整数值，下标从<code>0</code>开始</p>\n<p> c. 表达式过滤器</p>\n</li>\n<li><p><code>filter(expr)/(fn)</code>：筛选出与指定表达式/函数匹配的元素集合。</p>\n</li>\n<li><p>功能最强大的表达式过滤器，可接收函数参数，也可以是简单的选择器表达式</p>\n<p>d. 映射 <code>map(callback)</code>：将一组元素转换成其他数组</p>\n<p>e. 清洗 <code>not(expr)</code>：删除与指定表达式匹配的元素</p>\n<p> f. 截取 <code>slice(start,end)</code>：选取一个匹配的子集</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>十一、查找</strong></p>\n<p> 向下查找后代元素</p>\n<ul>\n<li><code>children()</code>:取得所有元素的所有子元素集合（子元素）</li>\n<li><code>find()</code>:搜索所有与指定表达式匹配的元素(所有后代元素中查找)</li>\n</ul>\n<p>查找兄弟元素 <code>siblings()</code>查找当前元素的兄弟</p>\n<h4 id=\"jQuery中DOM操作\"><a href=\"#jQuery中DOM操作\" class=\"headerlink\" title=\"jQuery中DOM操作\"></a>jQuery中DOM操作</h4><p> <strong>获得内容 - text()、html() 以及 val()</strong></p>\n<ul>\n<li>text() - 设置或返回所选元素的文本内容</li>\n<li>html() - 设置或返回所选元素的内容（包括 HTML 标记）</li>\n<li>val() - 设置或返回表单字段的值</li>\n</ul>\n<p><strong>插入节点</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>append()</code></td>\n<td>向每个匹配元素内部追加内容</td>\n</tr>\n<tr>\n<td><code>appendTo()</code></td>\n<td>颠倒<code>append()</code>的操作</td>\n</tr>\n<tr>\n<td><code>prepend()</code></td>\n<td>向每个匹配元素的内容内部前置内容</td>\n</tr>\n<tr>\n<td><code>prependTo()</code></td>\n<td>颠倒<code>prepend()</code>的操作</td>\n</tr>\n<tr>\n<td><code>after()</code></td>\n<td>向每个匹配元素之后插入内容</td>\n</tr>\n<tr>\n<td><code>insertAfter()</code></td>\n<td>颠倒<code>after()</code>的操作</td>\n</tr>\n<tr>\n<td><code>before()</code></td>\n<td>在每个匹配元素之前插入内容</td>\n</tr>\n<tr>\n<td><code>insertBefore()</code></td>\n<td>颠倒<code>before()</code>的操作</td>\n</tr>\n</tbody></table>\n<p><strong>删除节点</strong></p>\n<p>jQuery提供了三种删除节点的方法 <code>remove()</code> <code>detach()</code> <code>empty()</code></p>\n<p><strong><code>remove()</code></strong></p>\n<p>当某个节点用此方法删除后，该节点所包含的所有后代节点将同时被删除，用<code>remove()</code>方法删除后，还是可以继续使用删除后的引用</p>\n<p><strong><code>detach()</code></strong></p>\n<ul>\n<li>和<code>remove()</code>方法一样，也是从<code>DOM</code>中去掉所有匹配的元素，与<code>remove()</code>不同的是，所有绑定的事件、附加的数据等，都会被保留下来</li>\n</ul>\n<p><strong><code>empty()</code></strong></p>\n<ul>\n<li><code>empty()</code>方法并不是删除节点，而是清空节点，它能清空元素中所有后代节点</li>\n</ul>\n<p><strong>复制节点</strong></p>\n<ul>\n<li>使用<code>clone()</code>方法来完成</li>\n<li>在<code>clone()</code>方法中传递一个参数<code>true</code>，同时复制元素中所绑定的事件</li>\n</ul>\n<p><strong>替换节点</strong></p>\n<ul>\n<li><code>jQuery</code>提供相应的方法 <code>replaceWidth()</code></li>\n</ul>\n<p><strong>样式操作</strong></p>\n<ul>\n<li>获取样式和设置样式 <code>attr()</code></li>\n<li>追加样式 <code>addClass()</code></li>\n<li>移除样式 <code>removeClass()</code></li>\n<li>切换样式<ul>\n<li><code>toggle()</code>方法只要是控制行为上的重复切换（如果元素是显示的，则隐藏；如果元素原来是隐藏的，则显示）</li>\n<li><code>toggleClass()</code>方法控制样式上的重复切换（如何类名存在，则删除它，如果类名不存在，则添加它）</li>\n</ul>\n</li>\n<li>判断是否含有某个样式<ul>\n<li><code>hasClass()</code>可以用来判断元素是否含有某个<code>class</code>,如有返回<code>true</code> 该方法等价于<code>is()</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>设置和获取HTML、文本和值</strong></p>\n<ul>\n<li><p><code>html()</code></p>\n<ul>\n<li>此方法类似<code>JavaScript</code>中<code>innerHTML</code>属性，可以用来读取和设置某个元素中的<code>HTML</code>内容</li>\n</ul>\n</li>\n<li><p><code>text()</code></p>\n<p>方法</p>\n<ul>\n<li>此方法类型<code>JavaScript</code>中<code>innerHTML</code>，用来读取和设置某个元素中的文本内容</li>\n</ul>\n</li>\n</ul>\n<p>**<code>val()</code>**方法</p>\n<ul>\n<li>此方法类似<code>JavaScript</code>中的<code>value</code>属性，用来设置获取元素的值。无论是文本框、下拉列表还是单选框，都可以返回元素的值，如果元素多选，返回一个包含所有选择的值的数组</li>\n</ul>\n<p><strong>遍历节点</strong></p>\n<p>**<code>children()</code>**方法</p>\n<p>方法</p>\n<ul>\n<li>该方法用来取得匹配元素的子元素集合</li>\n<li><code>children()</code>方法只考虑子元素而不考虑其他后代元素</li>\n</ul>\n<p>**<code>next()</code>**方法</p>\n<ul>\n<li>该方法用于取得匹配元素后面紧邻的同辈元素</li>\n</ul>\n<p>**<code>prev()</code>**方法</p>\n<ul>\n<li>用于匹配元素前面紧邻的同辈元素</li>\n</ul>\n<p>**<code>siblings()</code>**方法</p>\n<ul>\n<li>用于匹配元素前后所有的同辈元素</li>\n</ul>\n<p>**<code>parent()</code>**方法</p>\n<ul>\n<li>获得集合中每个 元素的父级元素</li>\n</ul>\n<p>**<code>parents()</code>**方法</p>\n<ul>\n<li>获得集合中每个元素的祖先元素</li>\n</ul>\n<h4 id=\"jQuery动画\"><a href=\"#jQuery动画\" class=\"headerlink\" title=\"jQuery动画\"></a>jQuery动画</h4><p><strong>显隐动画</strong></p>\n<ul>\n<li><p><code>show()</code>:显示 <code>hide()</code>:隐藏</p>\n<ul>\n<li><p>原理：<code>hide()</code>通过改变元素的高度宽度和不透明度，直到这三个属性值到<code>0</code></p>\n</li>\n<li><p><code>show()</code>从上到下增加元素的高度，从左到右增加元素宽度，从<code>0</code>到<code>1</code>增加透明度，直至内容完全可见</p>\n</li>\n<li><p>参数：</p>\n  <pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">show(speed,callback)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>   <code>speed</code>: 字符串或数字，表示动画将运行多久（<code>slow=0.6</code>/<code>normal=0.4</code>/<code>fast=0.2</code>）<br>   <code>callback</code>: 动画完成时执行的方法</p>\n</li>\n</ul>\n</li>\n<li><p>显示和隐藏式一对密不可分的动画形式</p>\n</li>\n<li><p><strong>显隐切换</strong></p>\n<p><code>toggle()</code>:切换元素的可见状态</p>\n<ul>\n<li>原理：匹配元素的宽度、高度以及不透明度，同时进行动画，隐藏动画后将<code>display</code>设置为<code>none</code></li>\n<li>参数：<ul>\n<li><code>toggle(speed)</code></li>\n<li><code>toggle(speed,callback)</code></li>\n<li><code>toggle(boolean)</code><ul>\n<li><code>speed</code>: 字符串或数字，表示动画将运行多久（<code>slow=0.6</code>/<code>normal=0.4</code>/<code>fast=0.2</code>）</li>\n<li><code>easing</code>： 使用哪个缓冲函数来过渡的字符串(<code>linear</code>/<code>swing</code>)</li>\n<li><code>callback</code>： 动画完成时执行的方法</li>\n<li><code>boolean</code>:<code>true</code>为显示 <code>false</code>为隐藏</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>滑动</strong></p>\n<ul>\n<li><strong>显隐滑动效果</strong></li>\n<li><code>slideDown()</code>:滑动隐藏</li>\n<li><code>slidUp()</code>:滑动显示</li>\n<li>参数:<ul>\n<li><code>slideDown(speed,callback)</code></li>\n<li><code>slidUp(speed,callback)</code></li>\n</ul>\n</li>\n<li><strong>显隐切换滑动</strong><ul>\n<li><code>slideToggle()</code>:显隐滑动切换</li>\n<li>参数:<ul>\n<li><code>slidUp(speed,callback)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>渐变：通过改变不透明度</strong></p>\n<ul>\n<li><p><strong>淡入淡出</strong></p>\n<ul>\n<li><code>fadeIn()</code></li>\n<li><code>fadeOut()</code></li>\n<li>参数：<ul>\n<li><code>fadeIn(speed,callback)</code></li>\n<li><code>fadeOut(speed,callback)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>设置淡出透明效果</strong></p>\n<ul>\n<li><code>fadeTo()</code>：以渐进的方式调整到指定透明度</li>\n<li>参数：<ul>\n<li><code>fadeTo(speed,opacity,callback)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>渐变切换:结合<code>fadeIn</code>和<code>fadeOut</code></strong></p>\n<ul>\n<li><code>fadeToggle()</code></li>\n<li>参数:<ul>\n<li><code>fadeOut(speed,callback)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>自定义动画：<code>animate()</code></strong></p>\n<ul>\n<li><p>注意：在使用<code>animate</code>方法之前，为了影响该元素的<code>top</code>  <code>left</code> <code>bottom</code>  <code>right</code>样式属性，必须先把元素的<code>position</code>样式设置为<code>relative</code>或者<code>absolute</code></p>\n</li>\n<li><p>停止元素的动画</p>\n<ul>\n<li><p>很多时候需要停止匹配正在进行的动画，需要使用stop()</p>\n</li>\n<li><p>stop()语法结构：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>clearQueue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>gotoEnd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>都是可选参数，为布尔值</li>\n<li>如果直接使用<code>stop()</code>方法，会立即停止当前正在进行的动画</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>判断元素是否处于动画状态</p>\n<ul>\n<li>如果不处于动画状态，则为元素添加新的动画，否则不添加 <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":animated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//判断元素是否处于动画状态&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>这个方法在<code>animate</code>动画中经常被用到，需要注意</li>\n</ul>\n</li>\n<li><p>延迟动画</p>\n<ul>\n<li>在动画执行过程中，如果你想对动画进行延迟操作，那么使用<code>delay()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>用<code>animate</code>模拟<code>show()</code>:</p>\n<ul>\n<li><code>show</code>: 表示由透明到不透明</li>\n<li><code>toggle</code>: 切换</li>\n<li><code>hide</code>:表示由显示到隐藏</li>\n</ul>\n</li>\n<li><p><strong>动画方法总结</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>hide()</code>和<code>show()</code></td>\n<td>同时修改多个样式属性即高度和宽度和不透明度</td>\n</tr>\n<tr>\n<td><code>fadeIn()</code>和<code>fadeOut()</code></td>\n<td>只改变不透明度</td>\n</tr>\n<tr>\n<td><code>slideUp()</code>和<code>slideDown()</code></td>\n<td>只改变高度</td>\n</tr>\n<tr>\n<td><code>fadeTo()</code></td>\n<td>只改变不透明度</td>\n</tr>\n<tr>\n<td><code>toggle()</code></td>\n<td>用来代替<code>show()</code>和<code>hide()</code>方法，所以会同时修改多个属性即高度、宽度和不透明度</td>\n</tr>\n<tr>\n<td><code>slideToggle()</code></td>\n<td>用来代替<code>slideUp</code>和<code>slideDown()</code>方法，所以只能改变高度</td>\n</tr>\n<tr>\n<td><code>fadeToggle()</code></td>\n<td>用来代替<code>fadeIn()</code>和<code>fadeOut</code>方法，只能改变不透明度</td>\n</tr>\n<tr>\n<td><code>animate()</code></td>\n<td>属于自定义动画，以上各种动画方法都是调用了<code>animate</code>方法。此外，用<code>animate</code>方法还能自定义其他的样式属性，例如：<code>left</code> <code>marginLeft ``scrollTop</code>等</td>\n</tr>\n</tbody></table>\n<h4 id=\"jQuery中的事件\"><a href=\"#jQuery中的事件\" class=\"headerlink\" title=\"jQuery中的事件\"></a>jQuery中的事件</h4><p><strong>事件对象的属性</strong></p>\n<ul>\n<li><code>event.type</code>：获取事件的类型</li>\n<li><code>event.target</code>:获取到触发事件的元素</li>\n<li><code>event.preventDefault</code>方法 阻止默认事件行为</li>\n<li><code>event.stopPropagation()</code>阻止事件的冒泡</li>\n<li><code>keyCode</code>：只针对于<code>keypress</code>事件，获取键盘键数字 按下回车，<code>13</code></li>\n<li><code>event.pageX / event.pageY</code> 获取到光标相对于页面的<code>x</code>坐标和<code>y</code>坐标<ul>\n<li>如果没有<code>jQuery</code>，在IE浏览器中用<code>event.x</code> / <code>event.y</code>;在<code>Firefox</code>浏览器中用<code>event.pageX</code> / <code>event.pageY</code>。如果页面上有滚动条还要加上滚动条的宽度和高度</li>\n</ul>\n</li>\n<li><code>event.clientX</code>：光标对于浏览器窗口的水平坐标  浏览器</li>\n<li><code>event.clientY</code>：光标对于浏览器窗口的垂直坐标</li>\n<li><code>event.screenX</code>：光标对于电脑屏幕的水平坐标    电脑屏幕</li>\n<li><code>event.screenY</code>：光标对于电脑屏幕的水平坐标</li>\n<li><code>event.which</code> 该方法的作用是在鼠标单击事件中获取到鼠标的左、中、右键，在键盘事件中的按键 <code>1</code>代表左键  <code>2</code>代表中键  <code>3</code>代表右键</li>\n</ul>\n<p><strong>事件冒泡</strong></p>\n<ul>\n<li>什么是冒泡<ul>\n<li>在页面上可以有多个事件，也可以多个元素影响同一个元素</li>\n<li>从里到外</li>\n<li>嵌套关系</li>\n<li>相同事件</li>\n<li>其中的某一父类没有相同事件时,继续向上查找</li>\n</ul>\n</li>\n<li>停止事件冒泡<ul>\n<li>停止事件冒泡可以阻止事件中其他对象的事件处理函数被执行</li>\n<li>在<code>jQuery</code>中提供了**<code>stopPropagation()</code>**方法</li>\n</ul>\n</li>\n<li>阻止默认行为<ul>\n<li>网页中元素有自己的默认行为，例如：单击超链接后会跳转、单击提交后表单会提交，有时需要阻止元素的默认行为</li>\n<li>在<code>jQuery</code>中提供了<code>preventDefault()</code>方法来阻止元素的默认行为</li>\n</ul>\n</li>\n</ul>\n<p><strong>事件捕获</strong></p>\n<ul>\n<li>事件捕获和冒泡是相反的过程，事件捕获是从最顶端往下开始触发</li>\n<li>并非所有的浏览器都支持事件捕获，并且这个缺陷无法通过<code>JavaScript</code>来修复。<code>jQuery</code>不支持事件捕获，如需要用事件捕获，要用原生的<code>JavaScript</code></li>\n</ul>\n<p><strong><code>bind()</code>;绑定</strong></p>\n<ul>\n<li><p>为匹配元素绑定处理方法</p>\n</li>\n<li><p>需要给一个元素添加多个事件 ，事件执行一样时候</p>\n</li>\n<li><p><code>one()</code>：只执行一次</p>\n</li>\n<li><p><strong>绑定特定事件类型方法</strong>：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>方法名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>页面载入</td>\n<td><code>ready(fn)</code></td>\n<td>当<code>DOM</code>载入就绪可以绑定一个要执行的函数</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>blind(type,[data],fn)</code></td>\n<td>为每个匹配元素的特定事件绑定一个事件处理函数</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>unblind()</code></td>\n<td>解除绑定</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>on(events,[,selector[,]data],handler)</code></td>\n<td>在选择元素上绑定一个或者多个事件处理函数</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>off()</code></td>\n<td>移除<code>on</code>绑定的事件</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>delegate(selector,eventType,handler)</code></td>\n<td>为所有选择匹配元素附加一个或多个事件处理函数</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>undelegate()</code></td>\n<td>移除绑定</td>\n</tr>\n<tr>\n<td>事件动态</td>\n<td><code>live(type,fn)</code></td>\n<td>对动态生成的元素进行事件绑定</td>\n</tr>\n<tr>\n<td>事件动态</td>\n<td><code>die(type,fn)</code></td>\n<td>移除<code>live()</code>绑定的事件</td>\n</tr>\n<tr>\n<td>交互事件</td>\n<td><code>hover()</code></td>\n<td>鼠标移入移出</td>\n</tr>\n<tr>\n<td>交互事件</td>\n<td><code>toggle(fn1,fn2,[fn3],[fn4])</code></td>\n<td>每单击后依次调用函数</td>\n</tr>\n<tr>\n<td>交互事件</td>\n<td><code>blur(fn)</code></td>\n<td>触发每一个匹配元素的<code>blur</code>事件</td>\n</tr>\n<tr>\n<td>交互事件</td>\n<td><code>change()</code></td>\n<td>触发每一个匹配元素的<code>change</code>事件</td>\n</tr>\n<tr>\n<td>交互事件</td>\n<td><code>click()</code></td>\n<td>触发每一个匹配元素的<code>click</code>事件</td>\n</tr>\n<tr>\n<td>交互事件</td>\n<td><code>focus()</code></td>\n<td>触发每一个匹配元素的<code>focus</code>事件</td>\n</tr>\n<tr>\n<td>交互事件</td>\n<td><code>submit()</code></td>\n<td>触发每一个匹配元素的<code>submit</code>事件</td>\n</tr>\n<tr>\n<td>键盘事件</td>\n<td><code>keydown()</code></td>\n<td>触发每一个匹配元素的<code>keydown</code>事件</td>\n</tr>\n<tr>\n<td>键盘事件</td>\n<td><code>keypress()</code></td>\n<td>触发每一个匹配元素的<code>keypress</code>事件</td>\n</tr>\n<tr>\n<td>键盘事件</td>\n<td><code>keyup()</code></td>\n<td>触发每一个匹配元素的keyup事件</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>mousedown(fn)</code></td>\n<td>绑定一个处理函数</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>mouseenter(fn)</code></td>\n<td>绑定一个处理函数</td>\n</tr>\n<tr>\n<td>键盘事件</td>\n<td><code>mouseleave(fn)</code></td>\n<td>绑定一个处理函数</td>\n</tr>\n<tr>\n<td>键盘事件</td>\n<td><code>mouseout(fn)</code></td>\n<td>绑定一个处理函数</td>\n</tr>\n<tr>\n<td>键盘事件</td>\n<td><code>mouseover(fn)</code></td>\n<td>绑定一个处理函数</td>\n</tr>\n<tr>\n<td>窗口操作</td>\n<td><code>resize(fn)</code></td>\n<td>绑定一个处理函数</td>\n</tr>\n<tr>\n<td>窗口操作</td>\n<td><code>scroll(fn)</code></td>\n<td>绑定一个处理函数</td>\n</tr>\n</tbody></table>\n<h6 id=\"on注册事件\"><a href=\"#on注册事件\" class=\"headerlink\" title=\"on注册事件\"></a>on注册事件</h6><p>on注册简单事件</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。 $(selector).on( &quot;click&quot;, function() &#123;&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>on注册委托事件</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定 $(selector).on( &quot;click&quot;,“span”, function() &#123;&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>on注册事件的语法：</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件） &#x2F;&#x2F; 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。 &#x2F;&#x2F; 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用） &#x2F;&#x2F; 第四个参数：handler，事件处理函数 $(selector).on(events[,selector][,data],handler);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h6 id=\"事件解绑\"><a href=\"#事件解绑\" class=\"headerlink\" title=\"事件解绑\"></a>事件解绑</h6><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 解绑匹配元素的所有事件 $(selector).off(); &#x2F;&#x2F; 解绑匹配元素的所有click事件 $(selector).off(&quot;click&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"jquery中的ajax\"><a href=\"#jquery中的ajax\" class=\"headerlink\" title=\"jquery中的ajax\"></a>jquery中的ajax</h4><p><code>jquery</code>对<code>Ajax</code>操作进行了封装，在<code>jquery</code>中的<code>$.ajax()</code>方法属于最底层的方法，第<code>2</code>层是<code>load()</code>、<code>$.get()</code>、<code>$.post();</code>第<code>3</code>层是<code>$.getScript()</code>、<code>$.getJSON()</code>，第<code>2</code>层使用频率很高</p>\n<h6 id=\"load-方法\"><a href=\"#load-方法\" class=\"headerlink\" title=\"load()方法\"></a><code>load()</code>方法</h6><hr>\n<ul>\n<li><code>load()</code>方法是<code>jquery</code>中最简单和常用的<code>ajax</code>方法，能载入远程<code>HTML</code>代码并插入<code>DOM</code>中 结构为：<code>load(url,[data],[callback])</code></li>\n<li>使用<code>url</code>参数指定选择符可以加载页面内的某些元素 <code>load</code>方法中<code>url</code>语法：<code>url selector</code> 注意：<code>url</code>和选择器之间有一个空格</li>\n<li>传递方式<ul>\n<li><code>load()</code>方法的传递方式根据参数<code>data</code>来自动指定，如果没有参数传递，则采用<code>GET</code>方式传递，反之，采用<code>POST</code></li>\n</ul>\n</li>\n<li>回调参数<ul>\n<li>必须在加载完成后才执行的操作，该函数有三个参数 分别代表请求返回的内容、请求状态、<code>XMLHttpRequest</code>对象</li>\n<li>只要请求完成，回调函数就会被触发</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#testTest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.html\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">responseText<span class=\"token punctuation\">,</span>textStatus<span class=\"token punctuation\">,</span>XMLHttpRequest</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//respnoseText 请求返回的内容</span>\n    <span class=\"token comment\">//textStatus 请求状态 ：sucess、error、notmodified、timeout</span>\n    <span class=\"token comment\">//XMLHttpRequest </span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>.load方法参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>url</code></td>\n<td><code>String</code></td>\n<td>请求<code>HTML</code>页面的<code>URL</code>地址</td>\n</tr>\n<tr>\n<td><code>data(可选)</code></td>\n<td><code>Object</code></td>\n<td>发送至服务器的<code>key</code> / <code>value</code>数据</td>\n</tr>\n<tr>\n<td><code>callback(可选)</code></td>\n<td><code>Function</code></td>\n<td>请求完成时的回调函数，无论是请求成功还是失败</td>\n</tr>\n</tbody></table>\n<h6 id=\"get和-post方法\"><a href=\"#get和-post方法\" class=\"headerlink\" title=\"$.get和$.post方法\"></a>$.get和$.post方法</h6><hr>\n<p><code>load()</code>方法通常用来从web服务器上获取静态的数据文件。在项目中需要传递一些参数给服务器中的页面，那么可以使用<code>$.get()</code>和<code>$.post()</code>或<code>$.ajax()</code>方法</p>\n<ul>\n<li><p>注意：<code>$.get()</code>和<code>$.post()</code>方法是<code>jquery</code>中的全局函数</p>\n</li>\n<li><p><strong>$.get()方法</strong></p>\n<ul>\n<li><p><code>$.get()</code>方法使用<code>GET</code>方式来进行异步请求</p>\n</li>\n<li><p>结构为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$.get(url,[data],callback,type)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>如果服务器返回的内容格式是<code>xml</code>文档，需要在服务器端设置<code>Content-Type</code>类型 代码如下：<code>header(&quot;Content-Type:text/xml:charset=utf-8&quot;)</code> //<code>php</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>$.get()</code>方法参数解析</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>url</code></td>\n<td><code>String</code></td>\n<td>请求<code>HTML</code>页的地址</td>\n</tr>\n<tr>\n<td><code>data(可选)</code></td>\n<td><code>Object</code></td>\n<td>发送至服务器的<code>key</code>/ <code>value</code> 数据会作为<code>QueryString</code>附加到请求URL中</td>\n</tr>\n<tr>\n<td><code>callback(可选)</code></td>\n<td><code>Function</code></td>\n<td>载入成功的回调函数（只有当<code>Response</code>的返回状态是success才调用该方法）</td>\n</tr>\n<tr>\n<td><code>type(可选)</code></td>\n<td><code>String</code></td>\n<td>服务器返回内容的格式，包括<code>xml</code>、<code>html</code>、<code>script</code>、<code>json</code>、<code>text</code>和<code>_default</code></td>\n</tr>\n</tbody></table>\n<p><strong>$.post()方法</strong></p>\n<ul>\n<li>它与$.get()方法的结构和使用方式相同，有如下区别<ul>\n<li><code>GET</code>请求会将参数跟张乃URL后进行传递，而<code>POST</code>请求则是作为<code>Http</code>消息的实体内容发送给web服务器，在<code>ajax</code>请求中，这种区别对用户不可见</li>\n<li><code>GET</code>方式对传输数据有大小限制（通常不能大于<code>2KB</code>），而使用<code>POST</code>方式传递的数据量要比<code>GET</code>方式大得多（理论不受限制）</li>\n<li><code>GET</code>方式请求的数据会被浏览器缓存起来，因此其他人可以从浏览器的历史纪录中读取这些数据，如：账号、密码。在某种情况下，<code>GET</code>方式会带来严重的安全问题，而<code>POST</code>相对来说可以避免这些问题</li>\n<li><code>GET</code>和<code>POST</code>方式传递的数据在服务端的获取也不相同。在<code>PHP</code>中，<code>GET</code>方式用<code>$_GET[]</code>获取；<code>POST</code>方式用<code>$_POST[]</code>获取;两种方式都可用<code>$_REQUEST[]</code>来获取</li>\n</ul>\n</li>\n</ul>\n<p><strong>总结</strong></p>\n<ul>\n<li>使用<code>load()</code>、<code>$.get()</code>和<code>$.post()</code>方法完成了一些常规的<code>Ajax</code>程序，如果还需要复杂的<code>Ajax</code>程序，就需要用到<code>$.ajax()</code>方式</li>\n</ul>\n<h6 id=\"ajax-方法\"><a href=\"#ajax-方法\" class=\"headerlink\" title=\"$.ajax()方法\"></a>$.ajax()方法</h6><hr>\n<ul>\n<li><p><code>$.ajax()</code>方法是<code>jquery</code>最底层的<code>Ajax</code>实现，它的结构为<code>$.ajax(options)</code></p>\n</li>\n<li><p>该方法只有一个参数，但在这个对象里包含了<code>$.ajax()</code>方式所需要的请求设置以及回调函等信息，参数以<code>key</code> / <code>value</code>存在，所有参数都是可选的</p>\n</li>\n<li><p><strong>$.ajax()方式常用参数解析</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>url</code></td>\n<td><code>String</code></td>\n<td>(默认为当前页地址)发送请求的地址</td>\n</tr>\n<tr>\n<td><code>type</code></td>\n<td><code>String</code></td>\n<td>请求方式（<code>POST</code>或<code>GET</code>）默认为<code>GET</code></td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><code>Number</code></td>\n<td>设置请求超时时间（毫秒）</td>\n</tr>\n<tr>\n<td><code>dataType</code></td>\n<td><code>String</code></td>\n<td>预期服务器返回的类型。可用的类型如下<br /><br /> <strong>xml</strong>:返回<code>XML</code>文档，可用<code>jquery</code>处理<br /><strong>html</strong>:返回纯文本的<code>HTML</code>信息，包含的<code>script</code>标签也会在插入<code>DOM</code>时执行<br /><strong>script</strong>：返回纯文本的<code>javascript</code>代码。不会自动缓存结果，除非设置<code>cache</code>参数。注意：在远程请求时，所有的<code>POST</code>请求都将转为<code>GET</code>请求<br /><strong>json</strong>:返回<code>JSON</code>数据<br /><strong>jsonp</strong>:<code>JSONP</code>格式，使用<code>jsonp</code>形式调用函数时，例如：<code>myurl?call back=?,jquery</code>将自动替换后一个<code>？</code>为正确的函数名，以执行回调函数<br /><strong>text</strong>:返回纯文本字符串</td>\n</tr>\n<tr>\n<td><code>beforeSend</code></td>\n<td><code>Function</code></td>\n<td>发送请求前可以修改<code>XMLHttpRequest</code>对象的函数，例如添加自定义<code>HTTP</code>头。在<code>beforeSend</code>中如果返回<code>false</code>可以取消本次<code>Ajax</code>请求。<code>XMLHttpRequest</code>对象是唯一的参数<br /> function(XMLHttpRequest){<br />          <code>this</code>;//调用本次<code>Ajax</code>请求时传递的<code>options</code>参数 }</td>\n</tr>\n<tr>\n<td><code>complete</code></td>\n<td><code>Function</code></td>\n<td>请求完成后的回调函数（请求成功或失败时都调用）<br />参数：<code>XMLHttpRequest</code>对象和一个描述成功请求类型的字符串<br />function(XMLHttpRequest,textStatus){          <code>this</code>;//调用本次Ajax请求时传递的<code>options</code>参数 }</td>\n</tr>\n<tr>\n<td><code>success</code></td>\n<td><code>Function</code></td>\n<td>请求成功后调用的回调函数，有两个参数<br />(1)由服务器返回，并根据<code>dataTyppe</code>参数进行处理后的数据<br />(2)描述状态的字符串<br /><code>function</code>(data,textStatus){          //<code>data</code>可能是<code>xmlDoc、``jsonObj</code>、<code>html</code>、<code>text</code>等          <code>this</code>;//调用本次<code>Ajax</code>请求时传递的<code>options</code>参数<br />}</td>\n</tr>\n<tr>\n<td><code>error</code></td>\n<td><code>Function</code></td>\n<td>请求失败时被调用的函数</td>\n</tr>\n<tr>\n<td><code>global</code></td>\n<td><code>Boolean</code></td>\n<td>默认为<code>true</code>。表示是否触发全局<code>Ajax</code>事件，设置为<code>false</code>将不会触发。<code>AjaxStart</code>或<code>AjaxStop</code>可用于控制各种<code>Ajax</code>事件</td>\n</tr>\n</tbody></table>\n","feature":true,"text":"jquery笔记层级选择器 jQuery层级选择器—-包含选择器、子选择器、相邻选择器、兄弟选择器4种 a.包含选择器：$(&quot;a b&quot;)在给定的祖先元素下匹配所有后代元素。(不受层级限制) b.子选择器：$(&quot;parent &gt; child&qu...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Share","slug":"Share","count":5,"path":"api/categories/Share.json"}],"tags":[{"name":"Dev","slug":"Dev","count":5,"path":"api/tags/Dev.json"},{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#jquery%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">jquery笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B1%82%E7%BA%A7%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">层级选择器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#jQuery-%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">jQuery 元素选择器</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">过滤选择器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#jQuery%E4%B8%ADDOM%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">jQuery中DOM操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#jQuery%E5%8A%A8%E7%94%BB\"><span class=\"toc-text\">jQuery动画</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#jQuery%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">jQuery中的事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#on%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">on注册事件</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E8%A7%A3%E7%BB%91\"><span class=\"toc-text\">事件解绑</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#jquery%E4%B8%AD%E7%9A%84ajax\"><span class=\"toc-text\">jquery中的ajax</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#load-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">load()方法</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#get%E5%92%8C-post%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">$.get和$.post方法</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#ajax-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">$.ajax()方法</span></a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"XiaoJun","slug":"blog-author","avatar":"https://pic.cuonc.com/2020/01/27/e430dac3281e8.gif","link":"/","description":"HelloWorld!!!","socials":{"github":"https://github.com/LjyLab","twitter":"https://twitter.com/XiaoJun_Project","stackoverflow":"https://stackoverflow.com/","wechat":"","qq":"","weibo":"","zhihu":"https://zhihu.com","csdn":"https://csdn.com","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2021-12-11T16:12:32.874Z","updated":"2021-12-12T08:54:47.357Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":"https://pic.cuonc.com/2021/12/12/ccf43bc305d35.jpg","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"XiaoJun","slug":"blog-author","avatar":"https://pic.cuonc.com/2020/01/27/e430dac3281e8.gif","link":"/","description":"HelloWorld!!!","socials":{"github":"https://github.com/LjyLab","twitter":"https://twitter.com/XiaoJun_Project","stackoverflow":"https://stackoverflow.com/","wechat":"","qq":"","weibo":"","zhihu":"https://zhihu.com","csdn":"https://csdn.com","juejin":"https://juejin.cn","customs":{}}},"feature":true}}